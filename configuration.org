#+TITLE: EMACS configuration
#+AUTHOR: Roger J. H. Welsh
#+EMAIL: rjhwelsh@gmail.com
#+PROPERTY: header-args    :results silent
#+STARTUP: content

* Introduction
Originally inspired by Harry R. Schwartz. Your excellent introduction to
org-mode has inspired this.
* Harry's sensible-defaults.el
You can find this file, [[https://github.com/hrs/sensible-defaults.el][here]].
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/sensible-defaults.el")
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
#+END_SRC

* Personal Details
I would like to be able to share my config with other people to ease their
journey into emacs, as many others examples have done for me.
At the same time I would like to keep personal information private, so I source
a separate personal.org file, which is not included my repository.
#+BEGIN_SRC emacs-lisp
(org-babel-load-file "~/.emacs.d/personal.org")
#+END_SRC
.
* Init.el Comments
The following is commented out (as examples) , because it is required in the
init.el file; such that the latest version of org can be loaded before this file
is executed itself by *org*.

The package library is required for package management.
#+BEGIN_EXAMPLE emacs-lisp
 (require 'package)
#+END_EXAMPLE

Disable automatic package loading.
#+BEGIN_EXAMPLE emacs-lisp
 (setq package-enable-at-startup nil)
 (package-initialize)
#+END_EXAMPLE

This code provides a source list of package archives, from which to install packages.
#+BEGIN_EXAMPLE emacs-lisp
 (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
 (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
 (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
#+END_EXAMPLE

Refresh the last view of the elisp archives.
#+BEGIN_EXAMPLE emacs-lisp
 (unless package-archive-contents
   (package-refresh-contents))
(setq package-load-list '(all))
#+END_EXAMPLE

Use-package is a special set of macros to automatically install and
load packages from the init.el file, this needs to be
"bootstrapped" before we can use it.
#+BEGIN_EXAMPLE emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(require 'bind-key)
(require 'diminish)
#+END_EXAMPLE

Org-mode is required for evaluating code-blocks via babel.
#+BEGIN_EXAMPLE emacs-lisp
(require 'org)
#+END_EXAMPLE

This ensures emacs always follows symlinks to the version-controlled source.
#+BEGIN_EXAMPLE emacs-lisp
(setq vc-follow-symlinks t)
#+END_EXAMPLE

Load the main-configuration file. "Literally this file".
#+BEGIN_EXAMPLE emacs-lisp
(org-babel-load-file "~/.emacs.d/configuration.org")
#+END_EXAMPLE

* Hide certain modes from the modeline

*Harry:* I'd rather have only a few necessary mode identifiers on my modeline.
This either hides or "renames" a variety of major or minor modes using the
=diminish= package.

I use Harry's macros for completeness. If a package is setup with =use-package=,
please use the =:diminish= option there instead.

#+BEGIN_SRC emacs-lisp
  (defmacro diminish-minor-mode (filename mode &optional abbrev)
    `(eval-after-load (symbol-name ,filename)
       '(diminish ,mode ,abbrev)))

  (defmacro diminish-major-mode (mode-hook abbrev)
    `(add-hook ,mode-hook
               (lambda () (setq mode-name ,abbrev))))

  (diminish-minor-mode 'abbrev 'abbrev-mode)
  (diminish-minor-mode 'simple 'auto-fill-function)
  (diminish-minor-mode 'subword 'subword-mode)
  (diminish-minor-mode 'undo-tree 'undo-tree-mode)
  (diminish-major-mode 'emacs-lisp-mode-hook "el")
  (diminish-major-mode 'lisp-interaction-mode-hook "Î»")
  (diminish-major-mode 'python-mode-hook "Py")
#+END_SRC

* Auto-compile

Always compile packages and use the newest available.
#+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :config (auto-compile-on-load-mode)
  :ensure t)
(setq load-prefer-newer t)
#+END_SRC

* Configuration modules
Below is a list of sub-configurations which are loaded to provide certain types
of functionality. If you dislike or would like to stop using a particular module, simply
comment it out.
#+BEGIN_SRC emacs-lisp
		 (setq rjh/load-config-modules '(
			"org.org"
			"org-gantt.org"
			"git.org"
			"calendar.org"
			;"evil.org"
			"backup.org"
			"fonts.org"
			"yasnippet.org"
			"workgroups.org"
			"startup.org"
			"abbrev.org"
			"company.org"
			"mutt.org"
			"crypto.org"
			"bbdb.org"
			"theme.org"
			"text.org"
			"file.org"
			"python.org"
			"study.org"
			"undo.org"
			"graph.org"
		  "uml.org"
			"telephone-line.org"
	;;		"mule.org"
			"latex.org"
			"java.org"
			"recent.org"
			"rtags.org"
			"irony.org"
		))
#+END_SRC

All of these use =use-package= to install packages, with the =:ensure t= option.
If you are loading this for the first time, make sure you have an internet
connection.

I typically load an emacs server (=emacs --daemon=), and edit files using
=emacsclient -c=. This loads a new frame for each file I edit.
If I am already inside emacs, I will use =C-x C-f= to find a file and load it.

If you are new to emacs, (like I was) my process to start off was:
 * I started off with the tutorial =C-h t=.
 * I moved on to the [[info:info][*info*]] tutorial =C-h i=. The *info* pages are super
   helpful, and easy to navigate once you learn how.
 * Then I spent weeks crafting my configuration to get the setup I wanted,
   typically most of this was spent on configuring org and reading info pages.

These are functions used to load the configuration modules.
#+BEGIN_SRC emacs-lisp
(setq rjh/local-config-dir (expand-file-name "config" rjh/local-config-repo ))
	(defun rjh/load-config ()
		(let (value)
			 (dolist (module rjh/load-config-modules value)
					(org-babel-load-file
					 (expand-file-name module rjh/local-config-dir)
															 )
	)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(rjh/load-config)
#+END_SRC

.
