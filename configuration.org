#+TITLE: EMACS configuration
#+AUTHOR: Roger J. H. Welsh
#+EMAIL: rjhwelsh@gmail.com
#+PROPERTY: header-args    :results silent

* Introduction
Originally inspired by Harry R. Schwartz. Your excellent introduction to
org-mode has brought me to this. Come what may...

Personal contact information, (source other file).
#+BEGIN_SRC emacs-lisp
(org-babel-load-file "~/.emacs.d/personal.org")
#+END_SRC

* Follow symlinks by default
Emacs always prompts to follow symlinks, after I while of this, I
found a solution.
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

* Packages
** Archives

The following is commented out , because it is required in the init.el file;
such that the latest version of org can be loaded before this file is executed
itself by *org*. [ BOOTSTRAP ]
# The package library is required for package management.
# #+BEGIN_SRC emacs-lisp
# (require 'package)
# #+END_SRC

# Disable automatic package loading.
# #+BEGIN_SRC emacs-lisp
# (setq package-enable-at-startup nil)
# (package-initialize)
# #+END_SRC

# This code provides a source list of package archives, from which to install packages.
# #+BEGIN_SRC emacs-lisp
# (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
# (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
# (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
# #+END_SRC

# Refresh the last view of the elisp archives.
# #+BEGIN_SRC emacs-lisp
# (unless package-archive-contents
#   (package-refresh-contents))
# #+END_SRC

# Use-package is a special set of macros to automatically install and
# load packages from the init.el file, this needs to be
# bootstrapped before we can use it.
# #+BEGIN_SRC emacs-lisp
# (unless (package-installed-p 'use-package)
#   (package-refresh-contents)
#   (package-install 'use-package))
# (eval-when-compile
#   (require 'use-package))
# #+END_SRC

Always compile packages and use the newest available.
#+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :config (auto-compile-on-load-mode)
  :ensure t)
(setq load-prefer-newer t)
#+END_SRC

** use-package list
Packages to use are listed below. The :ensure t option, installs the
package automatically if need be.
#+BEGIN_SRC emacs-lisp
;Redundant I stopped using evil
;(use-package evil :ensure t )

(use-package magit  :ensure t )
(use-package "git-timemachine" :ensure t )

(use-package diff-hl  :ensure t )

(use-package rainbow-mode :ensure t )
(use-package "rainbow-delimiters" :ensure t )

(use-package "muttrc-mode" :ensure t )

(use-package "f" :ensure t )
(use-package "fill-column-indicator" :ensure t )
(use-package "findr" :ensure t )

;; Org-mode requires special bootstrapping in the main init.el file
;; (use-package org :ensure t :pin org)
(use-package "org-bullets" :ensure t )

(use-package "htmlize" :ensure t )

(use-package "gnuplot" :ensure t )
(use-package "graphviz-dot-mode" :ensure t )
(use-package "elpy" :ensure t )

(use-package "undo-tree" :ensure t )

; Themes +
(use-package "material-theme" :ensure t )
(use-package "solarized-theme" :ensure t )
(use-package "doremi" :ensure t )
(use-package "palette" :ensure t )
(use-package "facemenu+" :ensure t )
(use-package "font-lock+" :ensure t )
(use-package "fill-column-indicator" :ensure t )

; Templates
(use-package "yasnippet" :ensure t)
(use-package "yasnippet-snippets" :ensure t) ;; Official snippetm by AndreaCrotti

; Auto-completion
(use-package company :ensure t )
(use-package popup :ensure t)

; Syntax Checking
(use-package "flycheck" :ensure t )
(use-package "diminish" :ensure t )

; gnupg
(use-package "pinentry" :ensure t )

; flashcards
(use-package "pamparam" :ensure t )

; workspaces
(use-package "workgroups" :ensure t )

#+END_SRC

** load-path
Load paths
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elpa/org-plus-contrib-20171016")
#+END_SRC
.
* External Configuration
All configuration copied directly from external sources.
** Harry R. Schwartz

Harry's sensible-defaults.el
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/sensible-defaults.el")
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
#+END_SRC

Prevents file tree from being littered with backups, if the computer
crashes though, tough cookies.
#+BEGIN_SRC emacs-lisp
(sensible-defaults/backup-to-temp-directory)
#+END_SRC

*** CherryPicking Harry's configuration.org
The following are a section of hunks of Harry's configuration I have
cherrypicked for my own personal use.
*** Programming customization

I like shallow indentation, but tabs are displayed as 8 characters by default.
This reduces that.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

Treating terms in CamelCase symbols as separate words makes editing a little
easier for me, so I like to use =subword-mode= everywhere.

#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

Compilation output goes to the =*compilation*= buffer. I rarely have that window
selected, so the compilation output disappears past the bottom of the window.
This automatically scrolls the compilation window so I can always see the
output.

#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output t)
#+END_SRC

**** CSS and Sass

Indent 2 spaces and use =rainbow-mode= to display color-related words in the
color they describe.

#+BEGIN_SRC emacs-lisp
  (add-hook 'css-mode-hook
            (lambda ()
              (rainbow-mode)
              (setq css-indent-offset 2)))

  (add-hook 'scss-mode-hook 'rainbow-mode)
#+END_SRC

Don't compile the current file every time I save.

#+BEGIN_SRC emacs-lisp
  (setq scss-compile-at-save nil)
#+END_SRC

**** JavaScript and CoffeeScript

Indent everything by 2 spaces.

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)

  (add-hook 'coffee-mode-hook
            (lambda ()
              (yas-minor-mode 1)
              (setq coffee-tab-width 2)))
#+END_SRC

**** Python

Indent 2 spaces.

#+BEGIN_SRC emacs-lisp
  (setq python-indent 2)
#+END_SRC

**** =sh=

Indent with 2 spaces.

#+BEGIN_SRC emacs-lisp
  (add-hook 'sh-mode-hook
            (lambda ()
              (setq sh-basic-offset 2
                    sh-indentation 2)))
#+END_SRC

**** =web-mode=

If I'm in =web-mode=, I'd like to:

- Color color-related words with =rainbow-mode=.
- Still be able to run RSpec tests from =web-mode= buffers.
- Indent everything with 2 spaces.

#+BEGIN_SRC emacs-lisp
  (add-hook 'web-mode-hook
            (lambda ()
              (rainbow-mode)
              (rspec-mode)
              (setq web-mode-markup-indent-offset 2)))
#+END_SRC

*** UI preferences
**** Tweak window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC

# The default frame title isn't useful. This binds it to the name of the current
# project:

# #+BEGIN_SRC emacs-lisp
#   (setq frame-title-format '((:eval (projectile-project-name))))
# #+END_SRC

**** Use fancy lambdas

Why not?

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

**** Custom solarized-dark theme

I like the solarized-dark theme. I prefer keeping all the characters in the same
side and font, though.

#+BEGIN_SRC emacs-lisp
  (defun hrs/apply-solarized-theme ()
    (setq solarized-use-variable-pitch nil)
    (setq solarized-height-plus-1 1.0)
    (setq solarized-height-plus-2 1.0)
    (setq solarized-height-plus-3 1.0)
    (setq solarized-height-plus-4 1.0)
    (setq solarized-high-contrast-mode-line t)
    (load-theme 'solarized-dark t))
#+END_SRC

If this code is being evaluated by =emacs --daemon=, ensure that each subsequent
frame is themed appropriately.

#+BEGIN_SRC emacs-lisp
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                    (hrs/apply-solarized-theme)))
    (hrs/apply-solarized-theme))
#+END_SRC

**** Disable visual bell

=sensible-defaults= replaces the audible bell with a visual one, but I really
don't even want that (and my Emacs/Mac pair renders it poorly). This disables
the bell altogether.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

**** Scroll conservatively

When point goes outside the window, Emacs usually recenters the buffer point.
I'm not crazy about that. This changes scrolling behavior to only scroll as far
as point goes.

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

**** Set default font and configure font resizing

Harry's partial to Inconsolata. I prefer Hermit.

The standard =text-scale-= functions just resize the text in the current buffer;
I'd generally like to resize the text in /every/ buffer, and I usually want to
change the size of the modeline, too (this is especially helpful when
presenting). These functions and bindings let me resize everything all together!

Note that this overrides the default font-related keybindings from
=sensible-defaults=.

#+BEGIN_SRC emacs-lisp
  (setq scalable-fonts-allowed '( "iso10646-1$" ) )
  (setq hrs/default-font "Hermit")
  (setq hrs/default-font-size 10)
  (setq hrs/current-font-size hrs/default-font-size)

#+END_SRC



#+BEGIN_SRC

  (setq hrs/font-change-increment 1.1)

  (defun hrs/font-code ()
    "Return a string representing the current font (like \"Inconsolata-14\")."
    (concat hrs/default-font "-" (number-to-string hrs/current-font-size)))

  (defun hrs/set-font-size ()
    "Set the font to `hrs/default-font' at `hrs/current-font-size'.
  Set that for the current frame, and also make it the default for
  other, future frames."
    (let ((font-code (hrs/font-code)))
      (add-to-list 'default-frame-alist (cons 'font font-code))
      (set-frame-font font-code)))

  (defun hrs/reset-font-size ()
    "Change font size back to `hrs/default-font-size'."
    (interactive)
    (setq hrs/current-font-size hrs/default-font-size)
    (hrs/set-font-size))

  (defun hrs/increase-font-size ()
    "Increase current font size by a factor of `hrs/font-change-increment'."
    (interactive)
    (setq hrs/current-font-size
          (ceiling (* hrs/current-font-size hrs/font-change-increment)))
    (hrs/set-font-size))

  (defun hrs/decrease-font-size ()
    "Decrease current font size by a factor of `hrs/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq hrs/current-font-size
          (max 1
               (floor (/ hrs/current-font-size hrs/font-change-increment))))
    (hrs/set-font-size))

  (define-key global-map (kbd "C-)") 'hrs/reset-font-size)
  (define-key global-map (kbd "C-+") 'hrs/increase-font-size)
  (define-key global-map (kbd "C-=") 'hrs/increase-font-size)
  (define-key global-map (kbd "C-_") 'hrs/decrease-font-size)
  (define-key global-map (kbd "C--") 'hrs/decrease-font-size)

  (hrs/reset-font-size)
#+END_SRC

*NOTE:* Weird it seems that setting the font-size does not work here. But
 setting the keymaps to adjust fonts works somehow.
Font height was set to default at 121 1/10pts in customize-face, default.
I have since adjusted this back to 70 1/10pts using custom-set-faces in init.el.

**** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
#+END_SRC

**** Hide certain modes from the modeline

I'd rather have only a few necessary mode identifiers on my modeline. This
either hides or "renames" a variety of major or minor modes using the =diminish=
package.

#+BEGIN_SRC emacs-lisp
  (defmacro diminish-minor-mode (filename mode &optional abbrev)
    `(eval-after-load (symbol-name ,filename)
       '(diminish ,mode ,abbrev)))

  (defmacro diminish-major-mode (mode-hook abbrev)
    `(add-hook ,mode-hook
               (lambda () (setq mode-name ,abbrev))))

  (diminish-minor-mode 'abbrev 'abbrev-mode)
  ;(diminish-minor-mode 'simple 'auto-fill-function)
  ;(diminish-minor-mode 'company 'company-mode)
  ;(diminish-minor-mode 'eldoc 'eldoc-mode)
  (diminish-minor-mode 'flycheck 'flycheck-mode)
  (diminish-minor-mode 'flyspell 'flyspell-mode)
  ;(diminish-minor-mode 'global-whitespace 'global-whitespace-mode)
  ;(diminish-minor-mode 'projectile 'projectile-mode)
  ;(diminish-minor-mode 'ruby-end 'ruby-end-mode)
  (diminish-minor-mode 'subword 'subword-mode)
  (diminish-minor-mode 'undo-tree 'undo-tree-mode)
  ;(diminish-minor-mode 'yard-mode 'yard-mode)
  ;(diminish-minor-mode 'yasnippet 'yas-minor-mode)
  ;(diminish-minor-mode 'wrap-region 'wrap-region-mode)

  ;(diminish-minor-mode 'paredit 'paredit-mode " π")

  (diminish-major-mode 'emacs-lisp-mode-hook "el")
  ;(diminish-major-mode 'haskell-mode-hook "λ=")
  (diminish-major-mode 'lisp-interaction-mode-hook "λ")
  (diminish-major-mode 'python-mode-hook "Py")
#+END_SRC

**** Highlight uncommitted changes

Use the =diff-hl= package to highlight changed-and-uncommitted lines when
programming.

#+BEGIN_SRC emacs-lisp
  (require 'diff-hl)

  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
#+END_SRC

*** Exporting

# Allow export to markdown and beamer (for presentations).
# #+BEGIN_SRC emacs-lisp
#   (require 'ox-md)
#   (require 'ox-beamer)
# #+END_SRC

Allow =babel= to evaluate Emacs lisp, Ruby, dot, or Gnuplot code.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
    ; (ruby . t)
     (dot . t)
     (gnuplot . t)))
#+END_SRC

Don't ask before evaluating code blocks.

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

Associate the "dot" language with the =graphviz-dot= major mode.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
#+END_SRC

Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.

#+BEGIN_SRC emacs-lisp
  (setq org-export-with-smart-quotes t)
#+END_SRC

***** Exporting to HTML

Don't include a footer with my contact and publishing information at the bottom
of every exported HTML document.

#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC

Exporting to HTML and opening the results triggers =/usr/bin/sensible-browser=,
which checks the =$BROWSER= environment variable to choose the right browser.
I'd like to always use Firefox, so:

#+BEGIN_SRC emacs-lisp
  (setenv "BROWSER" "firefox")
#+END_SRC
** Dennis Ogbe
** Bernt Hansen
A function for skipping archiving tasks from Bernt Hansen.
#+BEGIN_SRC emacs-lisp
(setq org-archive-mark-done nil) ;; Do not mark archived tasks as done.
(defun bh/skip-non-archivable-tasks ()
  "Skip trees that are not available for archiving"
  (save-restriction
    (widen)
    ;; Consider only tasks with done todo headings as archivable candidates
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
          (subtree-end (save-excursion (org-end-of-subtree t))))
      (if (member (org-get-todo-state) org-todo-keywords-1)
          (if (member (org-get-todo-state) org-done-keywords)
              (let* ((daynr (string-to-int (format-time-string "%d" (current-time))))
                     (a-month-ago (* 60 60 24 (+ daynr 1)))
                     (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                     (this-month (format-time-string "%Y-%m-" (current-time)))
                     (subtree-is-current (save-excursion
                                           (forward-line 1)
                                           (and (< (point) subtree-end)
                                                (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                (if subtree-is-current
                    subtree-end ; Has a date in this month or last month, skip it
                  nil))  ; available to archive
            (or subtree-end (point-max)))
        next-headline))))
#+END_SRC

* Evil-mode
I originally came from vim, and this helped me gain some familiarity
with emacs before going head over heels. I eventually commented it out
so that I could focus on improving my emacs ability.
# #+BEGIN_SRC emacs-lisp
# ;; (require 'evil)
# ;; (evil-mode t)
# #+END_SRC

* Text-mode
Auto-fill automatically breaks up words into paragraphs.
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'auto-fill-mode )
#+END_SRC

* Url-handling
Set your default browser here.
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-firefox)
#+END_SRC

* Git Porcelain
I use magit for git integration. The following key-bindings are for convenience.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
#+END_SRC

* FACES
FACES are custom settings for font, colour, background etc.
** Time Management Faces
 These faces are for [[*Time%20Management][Time Management]].
 #+BEGIN_SRC emacs-lisp
   (defface todo
         '(
           (((class color) (min-colors 8))
            :background "red" :foreground "black" :weight extra-bold
            :inherit default :height 1.0 :box ( :style released-button ) )
          )
         "Face for basic todo items."
         :group 'todo-faces)
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
         (defface done
               '(
                 (((class color) (min-colors 8))
                  :background "green" :foreground "black" :weight extra-bold
                  :inherit default :height 1.0 :box ( :style released-button ) )
                )
               "Face for basic todo items."
               :group 'todo-faces)
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
         (defface new
               '(
                 (((class color) (min-colors 8))
                  :background "blue" :foreground "white" :weight extra-bold
                  :inherit default :height 1.0 :box ( :style released-button ) )
                )
               "Face for basic todo items."
               :group 'todo-faces)
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
         (defface someday
               '(
                 (((class color) (min-colors 8))
                  :background "blue" :foreground "gray" :weight extra-bold
                  :inherit default :height 1.0 :box ( :style released-button ) )
                )
               "Face for basic todo items."
               :group 'todo-faces)
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
   (defface plan
         '(
           (((class color) (min-colors 8))
            :background "yellow" :foreground "black" :weight extra-bold
            :inherit default :height 1.0 :box ( :style released-button ) )
          )
         "Face for basic todo items."
         :group 'todo-faces)
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
         (defface verify
               '(
                 (((class color) (min-colors 8))
                  :background "orange" :foreground "black" :weight extra-bold
                  :inherit default :height 1.0 :box ( :style released-button ) )
                )
               "Face for basic todo items."
               :group 'todo-faces)
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
   (defface delegate
         '(
           (((class color) (min-colors 8))
            :background "magenta" :foreground "black" :weight extra-bold
            :inherit default :height 1.0 :box ( :style released-button ) )
          )
         "Face for basic todo items."
         :group 'todo-faces)
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
         (defface wait
               '(
                 (((class color) (min-colors 8))
                  :background "black" :foreground "cyan" :weight extra-bold
                  :inherit default :height 1.0 :box ( :style released-button ) )
                )
               "Face for basic todo items."
               :group 'todo-faces)
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
   (defface action
         '(
           (((class color) (min-colors 8))
            :background "red" :foreground "black" :weight extra-bold
            :inherit default :height 1.0 :box ( :style released-button ) )
          )
         "Face for basic todo items."
         :group 'todo-faces)
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
         (defface context
               '(
                 (((class color) (min-colors 8))
                  :background "black" :foreground "orange" :weight extra-bold
                  :inherit default :height 1.0 :box ( :style released-button ) )
                )
               "Face for basic todo items."
               :group 'todo-faces)
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
   (defface event
         '(
           (((class color) (min-colors 8))
            :background "black" :foreground "green" :weight extra-bold
            :inherit default :height 1.0 :box ( :style released-button ) )
          )
         "Face for basic todo items."
         :group 'todo-faces)
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
         (defface canceled
               '(
                 (((class color) (min-colors 8))
                  :background "dim gray" :foreground "gray" :weight extra-bold
                  :inherit default :height 1.0 :box ( :style released-button ) )
                )
               "Face for basic todo items."
               :group 'todo-faces)
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
         (defface trash
               '(
                 (((class color) (min-colors 8))
                  :background "green" :foreground "dim gray" :weight extra-bold
                  :inherit default :height 1.0 :box ( :style released-button ) )
                )
               "Face for basic todo items."
               :group 'todo-faces)
 #+END_SRC

* Org Mode Options
** Keybindings and variables
Some handy keybindings.
#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)
#+END_SRC
Set the org-directory.
#+BEGIN_SRC emacs-lisp
 (setq org-directory "~/.emacs.d/org" )
#+END_SRC
Some default locations.
#+BEGIN_SRC emacs-lisp
	(setq rjh/org-inbox (expand-file-name "inbox.org" org-directory)
			rjh/org-journal (expand-file-name "journal.org" org-directory)
		 rjh/org-diary diary-file  ;; I just use the default diary for my appointments
	 )
#+END_SRC
** Application Defaults
Default application associations.
#+BEGIN_SRC emacs-lisp
	(setq org-file-apps '((auto-mode . emacs)
												("\\.x?html?\\'" . "firefox %s")
												("\\.pdf\\'" . "evince \"%s\"")
												("\\.pdf::\\([0-9]+\\)\\'" . "evince \"%s\" -p %1")
												))
#+END_SRC
Link frame setup. Prevent windows from splitting.
#+BEGIN_SRC emacs-lisp
	(setq org-link-frame-setup '((file . find-file)
														 ))
#+END_SRC

** Time Management
*** 'TODO' Conf
 For group projects, put this at the top of the project line.
 #+BEGIN_EXAMPLE
 #+TYP_TODO: @ROGER(r) @NAME1(1) @NAME2(2) | DONE(d)
 #+END_EXAMPLE

**** Workflow
 Workflow states.
	1. Regular TODO / DONE.
	2. Getting Things Done Workflow.
	3. Location themed tasks.
	5. Cancelled Or Trashed.
	6. Bug catcher.

 For below; make the following notes:
	+ Expressions may be a "sequence" or "type" ; "type" goes straight to DONE
		after completion. Sequences rotate through all keywords.
	+ TODO = the todo keyword
	+ (t) = the fast key shortcut
	+ ! means LOG timestamp when changing *TO* item.
	+ @ means LOG timestamp with note when changing item.
	+ /! means LOG timestamp/note when changing *FROM* item also.
	+ org-log-into-drawer LOGS everything into a hidden drawer, so everything looks cleaner.
 #+BEGIN_SRC emacs-lisp
 (setq org-todo-keywords
		'(
		(sequence "TODO(t!)" "|" "DONE(d!)" )
		(sequence "NEW(n!)" "SOMEDAY(s!)"
								"PLAN OUT(p!)" "VERIFY(v!)"
								"DELEGATE(D@/!)" "WAITING FOR(w!)"
								"ACTION(a!/!)" "@CONTEXT(C/!)" "EVENT(e!)"
								"|" )
		(type "@HOME(H)" "@WORK(W)" "@OUTSIDE(O)"
						"@SHOP(S)" "@CAFE(F)" "@GARAGE(G)" "@BREAK(B)" "|" )
		(type "|" "CANCELED(k@)" "TRASH(t!)" )
		(sequence "REPORT(r!)" "BUG(b!)" "KNOWNCAUSE(K!)" "|" "FIXED(f@)" )
		)
 )
 (setq org-log-into-drawer t) ;LOGBOOK
 #+END_SRC
**** Priorities
 Priorities are assigned A,B,C,D. B being the default.
 I'm particularly inspired by the Eisenhower Matrix and Must/Should/Nice todos.
 For reference, see the table below. Typically, one should attempt to accomplish
 as many B's in a day as possible; while also taking regular breaks.
 If you have nothing left todo, D's are pleasant enough.

 | PRIORITY   | NOT IMPORTANT | IMPORTANT  |
 |------------+---------------+------------|
 | NOT URGENT | D - PLEASANT  | B - SHOULD |
 |------------+---------------+------------|
 | URGENT     | C - NICE      | A - MUST   |
 |------------+---------------+------------|

 So.. one way to describe my priorities, would be...
 #+BEGIN_EXAMPLE
 #+PRIORITIES: C A D .
 #+END_EXAMPLE

 #+BEGIN_SRC emacs-lisp
	(setq org-default-priority 67)
	(setq org-highest-priority 65)
	(setq org-lowest-priority 68)
 #+END_SRC
**** Dependencies
 Dependency settings.
 This allows for task blocking/etc.
 #+BEGIN_SRC emacs-lisp
	(setq org-enforce-todo-dependencies t)
	(setq org-agenda-dim-blocked-tasks t)
	(setq org-enforce-todo-checkbox-dependencies t)
 #+END_SRC
**** Face Settings
 #+BEGIN_SRC emacs-lisp
   (setq org-todo-keyword-faces
         '(("TODO" . todo)
           ("DONE" . done)
           ("NEW" . new)
           ("SOMEDAY" . someday )
           ("PLAN OUT" . plan)
           ("VERIFY" . verify )
           ("DELEGATE" . delegate )
           ("WAITING FOR" . wait )
           ("ACTION" . action )
           ("@CONTEXT" . context )
           ("EVENT" . event )
           ("CANCELED" . canceled )
           ("TRASH" . canceled )
           ("@HOME" . context )
           ("@WORK" . context )
           ("@SHOP" . context )
           ("@OUTSIDE" . context )
           ("@CAFE" . context )
           ("@GARAGE" . context )
					("@BREAK" . context )
           )
   )
 #+END_SRC

*** Agenda Conf
Store the list of agenda files in ...
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files "~/.emacs.d/agenda-files" )
#+END_SRC

#+RESULTS:
: ~/.emacs.d/agenda-files

Keep a diary file here...
#+BEGIN_SRC emacs-lisp
; or maybe not...
#+END_SRC

*** Diary Conf
Calendar style. Diary entries. Diary file.
#+BEGIN_SRC emacs-lisp
(setq calendar-date-style "iso"
diary-number-of-entries "1"
diary-file "~/.emacs.d/diary" ;; --> links to org dir
)
;; In-case calendar is already loaded..
(calendar-set-date-style "iso")

#+END_SRC

Holidays display. Most of them are American. (HIDE THEM).
#+BEGIN_SRC emacs-lisp
(setq calendar-mark-holidays-flag t
 holiday-general-holidays nil
 holiday-bahai-holidays nil
 holiday-christian-holidays nil
 holiday-hebrew-holidays nil
 holiday-islamic-holidays nil
 holiday-oriental-holidays nil
 holiday-other-holidays nil
)
#+END_SRC

Reminders
#+BEGIN_SRC emacs-lisp
(appt-activate)
#+END_SRC

Integrate with org-mode
#+BEGIN_SRC emacs-lisp
(setq org-agenda-include-diary t)
#+END_SRC

*** Clocking Working Time
  To save the clock history across Emacs sessions, use
#+BEGIN_SRC emacs-lisp
     (setq org-clock-persist 'history)
     (org-clock-persistence-insinuate)
#+END_SRC

Effort estimates and column view
Appointment default durations and effort addition.
Use C-c C-x C-c to access.
#+BEGIN_SRC emacs-lisp
	(setq org-global-properties '(("Effort_ALL". "0 0:10 0:20 0:30 1:00 2:00 3:00 4:00 6:00 8:00"))
				org-columns-default-format '"%38ITEM(Details) %7TODO(To Do) %TAGS(Context) %PRIORITY(Pri) %5Effort(Effort){:} %6CLOCKSUM(Clock)"
			 org-agenda-columns-add-appointments-to-effort-sum t
		 org-agenda-default-appointment-duration 30
	)
#+END_SRC

org-agenda-columns-add-appointments-to-effort-sum adds appointment times to
effort sums for the day.
*** Archival
=C-cxs=
Add this to your file, to adjust =org-archive-location= for a particular file.
#+BEGIN_EXAMPLE
#+ARCHIVE: %s_done::
#+END_EXAMPLE

The default location is set below.
This archives items in a file called zarchive.org in the same folder.
#+BEGIN_SRC emacs-lisp
(setq org-archive-location "zarchive.org::* %s" )
#+END_SRC

*Note*
 + =%s= represents the current filename.
 + =::= is a seperator between files and headers.
 + =file::= use this format for archiving to a specific file.
 + =::header= use this format to archive to a specific header.
 + =::***header= use asterisks to denote the sub-level of the header.
 + =::datetree/= use =datetree/= to file under a date-tree.
** Capture/Refile Settings
These are settings for capturing/refiling information.
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file rjh/org-inbox)
#+END_SRC

Capture templates.
#+BEGIN_SRC emacs-lisp
					(setq org-capture-templates
								'(("t" "Todo" entry (file+headline rjh/org-inbox "Tasks")
											 "* TODO %?\n\t%i\n\t%a" nil)
									("j" "Journal" entry (file+datetree rjh/org-journal )
											 "* %?\n\tEntered on %U\n\t%i\n\t%a" :kill-buffer )
									("a" "Appointment" entry (file+headline rjh/org-inbox "Appointments" )
											 "* %?\n\t%^T\n\t%i\n\t%a")
									("x" "Checklist" checkitem (clock) "+ [ ] %?\n\n" :kill-buffer)
									("T" "Table" table-line (clock) :kill-buffer )))
#+END_SRC


Refiling list.
#+BEGIN_SRC emacs-lisp
	;; Function to return org-buffer-files
	(defun ixp/org-buffer-files ()
		"Return list of opened orgmode buffer files"
		(mapcar (function buffer-file-name)
						(org-buffer-list 'files)))

  ;; Refiling targets
	(setq org-refile-targets
						'((nil :maxlevel . 3 )
							(org-agenda-files :maxlevel . 3)
							(org-agenda-files :tag . ":ref:")
							(org-agenda-files :todo . "ACTION")
						(ixp/org-buffer-files :maxlevel . 1)
						 ))
		(setq org-outline-path-complete-in-steps t)
		(setq org-refile-use-outline-path t)
		(setq org-refile-allow-creating-parent-nodes 'confirm)

#+END_SRC

Specification is any of:
 +  "FILE"
 +  a cons cell (:tag . "TAG")
 +  a cons cell (:todo . "KEYWORD")
 +  a cons cell (:regexp . "REGEXP") ;; regexp to match headlines
 +  a cons cell (:level . N) Any headline of level N is considered a target.
 +  a cons cell (:maxlevel . N) Any headline with level <= N is a target.
 +  (nil . (:level . 1)) Match all top-level headlines in the current buffer.
 +  ("FILE" . (:level. 1)) Match all top-level headlines in FILE.

The union of these sets is presented (with completion) to the user by
org-refile. =C-cw= .
You can set the variable =org-refile-target-verify-function= to a function to
verify each headline found by the criteria above.

** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode t)))
#+END_SRC

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

Enable spell-checking in Org-mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

** Exporting Html
Checklists did not render as I would like them, I think this makes
them far more prettier in html.
#+BEGIN_SRC emacs-lisp
(setq org-html-checkbox-type 'html)
#+END_SRC

** Quick Templates

Org structure templates.
#+BEGIN_SRC emacs-lisp
	(add-to-list 'org-structure-template-alist
							 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC")
						   '("py" "#+BEGIN_SRC python\n?\n#+END_SRC")
							 )
#+END_SRC

* Abbreviations
A list of common abbreviations to make typing faster.

Contact Information. (Harry's "@" symbols didn't work, so I am using "z" instead).
#+BEGIN_SRC emacs-lisp
  (define-abbrev-table 'global-abbrev-table
    '(("zname" "Roger J. H. Welsh")
      ("zemail" "rjhwelsh@gmail.com")
      ("zgmail" "hrothgar013@gmail.com")
      ("zproton" "rjhwelsh@protonmail.ch")
      ))
#+END_SRC

Always enable =abbrev-mode=:
#+BEGIN_SRC emacs-lisp
  (setq-default abbrev-mode t)
#+END_SRC

Define an abbreviation file.
#+BEGIN_SRC emacs-lisp
 (setq abbrev-file-name             ;; tell emacs where to read abbrev
        "~/.emacs.d/abbrev_defs")    ;; definitions from...
#+END_SRC

Save abbreviations automatically on logout.
#+BEGIN_SRC emacs-lisp
(setq save-abbrevs t)              ;; save abbrevs when files are saved
                                     ;; you will not be asked before the abbreviations are saved
#+END_SRC

* Org Contrib
Org-contrib consists of packages as part of org-plus-contrib.
** org-index
Keybindings. Index File.
Let's start off slow.
#+BEGIN_SRC emacs-lisp
	(require 'org-index)
	(setq org-index-file "~/.emacs.d/index.org"
			  org-index-id "1c3f8ddb-f941-42d9-88fb-8093095b9b5b"
				)
	(global-set-key (kbd "C-c i") 'org-index)
#+END_SRC
Then maybe later progress to this...
#+BEGIN_EXAMPLE emacs-lisp
(define-prefix-command 'org-index-map)
(global-set-key (kbd "C-c i") 'org-index-map)
(define-key org-index-map (kbd "o") (lambda () (interactive) (org-index 'occur)))
(define-key org-index-map (kbd "r") (lambda () (interactive) (org-index 'ref)))
(define-key org-index-map (kbd "l") (lambda () (interactive) (org-index 'leave)))
(define-key org-index-map (kbd "h") (lambda () (interactive) (org-index 'head)))
(define-key org-index-map (kbd "i") (lambda () (interactive) (org-index)))
#+END_EXAMPLE
.
** koma-letter-export
Activate KOMA-Script letter exporter.
#+BEGIN_SRC emacs-lisp
(eval-after-load 'ox '(require 'ox-koma-letter))
#+END_SRC

You can add your own customized class, my-letter as follows.
#+BEGIN_EXAMPLE
(eval-after-load 'ox-koma-letter
  '(progn
     (add-to-list 'org-latex-classes
                  '("my-letter"
                    "\\documentclass\{scrlttr2\}
     \\usepackage[english]{babel}
     \\setkomavar{frombank}{(1234)\\,567\\,890}
     \[DEFAULT-PACKAGES]
     \[PACKAGES]
     \[EXTRA]"))

     (setq org-koma-letter-default-class "my-letter")))
#+END_EXAMPLE
For more info see [[http://orgmode.org/worg/exporters/koma-letter-export.html][here.]]

* Workgroups
** Initial Frame
 After emacs has booted I would like it to display several items on the screen
 (by default). These are:
	* [X] The agenda for the day.
	* [-] My todo list.
	* [X] A file called startup.org (homepage).
 #+BEGIN_SRC emacs-lisp
	 (add-hook 'after-make-frame-functions
						 (lambda (&optional frame)
							 (select-frame-set-input-focus frame)
							 (org-agenda-list 1)
							 (delete-other-windows)
							 (split-window-vertically)
							 (calendar)
							 (diary-mark-entries)
							 (other-window 1)
							 (split-window-horizontally)
							 (find-file "~/startup.org")
						   (wg-switch-to-index-0)
						 )
	 )
 #+END_SRC

** Workgroups setup
	 Keybindings.
Use the following with <prefix> ;
  + c :: wg-create-workgroup
	+ A :: wg-rename-workgroup
	+ v :: wg-switch-to-workgroup
	+ n/p :: next/prev workgroup
	+ 0-9 :: switch thru positions in list
	+ w :: wg-toggle-morph (animation)
	+ C-s/l :: save / load workgroup
  + k :: kill workgroup
  + ,/. :: move left/right in group listing
	+ ? :: wg-help
#+BEGIN_SRC emacs-lisp
(require 'workgroups)
(setq wg-prefix-key (kbd "C-c w"))
(workgroups-mode 1)
(wg-load "~/.emacs.d/workgroups" )
#+END_SRC

* Yasnippet
For more details, see [[http://joaotavora.github.io/yasnippet/][documentation.]]
Setup snippet directories.
Add more snippet directories here.
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
;;(setq yas-snippet-dirs
;;			'("~/.emacs.d/snippets"                 ;; personal snippets
;;		  ))
;; This is default behaviour anyway.
#+END_SRC

Enable yasnippet globally.
#+BEGIN_SRC emacs-lisp
(yas-global-mode 1)
#+END_SRC
.
N.B. For html tags use emmet-mode instead of yasnippet.

** Pop-up integration

#+BEGIN_SRC emacs-lisp
(require 'popup)

;; add some shortcuts in popup menu mode
(define-key popup-menu-keymap (kbd "M-n") 'popup-next)
(define-key popup-menu-keymap (kbd "TAB") 'popup-next)
(define-key popup-menu-keymap (kbd "<tab>") 'popup-next)
(define-key popup-menu-keymap (kbd "<backtab>") 'popup-previous)
(define-key popup-menu-keymap (kbd "M-p") 'popup-previous)

(defun yas/popup-isearch-prompt (prompt choices &optional display-fn)
  (when (featurep 'popup)
    (popup-menu*
     (mapcar
      (lambda (choice)
        (popup-make-item
         (or (and display-fn (funcall display-fn choice))
             choice)
         :value choice))
      choices)
     :prompt prompt
     ;; start isearch mode immediately
     :isearch t
     )))

(setq yas/prompt-functions '(yas/popup-isearch-prompt yas/no-prompt))
#+END_SRC

* Company-mode
Adding auto-completion features using company-mode.

Use auto-completion on all modes.
#+BEGIN_SRC emacs-lisp
	(setq company-global-modes t)
	(global-company-mode 1)
#+END_SRC

Completion delay and minimum prefix length.
#+BEGIN_SRC emacs-lisp
(setq company-idle-delay 0.8)
(setq company-minimum-prefix-length 2)
#+END_SRC

Yasnippet integration. (Compatibility).
#+BEGIN_SRC emacs-lisp
(defun check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
	(backward-char 1)
	(if (looking-at "->") t nil)))))

(defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
    (yas/expand)))

(defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas/minor-mode)
	    (null (do-yas-expand)))
	(if (check-expansion)
	    (company-complete-common)
	  (indent-for-tab-command)))))

(global-set-key (kbd "<tab>") 'tab-indent-or-complete)

#+END_SRC

Add yasnippet support for all backends.
#+BEGIN_SRC emacs-lisp
;; Add yasnippet support for all company backends
;; https://github.com/syl20bnr/spacemacs/pull/179
(defvar company-mode/enable-yas t
  "Enable yasnippet for all backends.")

(defun company-mode/backend-with-yas (backend)
  (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
      backend
    (append (if (consp backend) backend (list backend))
            '(:with company-yasnippet))))

(setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
#+END_SRC
