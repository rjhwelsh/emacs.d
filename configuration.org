#+TITLE: EMACS configuration
#+AUTHOR: Roger J. H. Welsh
#+EMAIL: rjhwelsh@gmail.com
#+PROPERTY: header-args    :results silent
#+STARTUP: content

* Introduction
Originally inspired by Harry R. Schwartz. Your excellent introduction to
org-mode has inspired this.
* Harry's sensible-defaults.el
You can find this file, [[https://github.com/hrs/sensible-defaults.el][here]].
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/sensible-defaults.el")
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
#+END_SRC

* Personal Details
I would like to be able to share my config with other people to ease their
journey into emacs, as many others examples have done for me.
At the same time I would like to keep personal information private, so I source
a separate personal.org file, which is not included my repository.
#+BEGIN_SRC emacs-lisp
(org-babel-load-file "~/.emacs.d/personal.org")
#+END_SRC
.
* Init.el Comments
The following is commented out (as examples) , because it is required in the
init.el file; such that the latest version of org can be loaded before this file
is executed itself by *org*.

The package library is required for package management.
#+BEGIN_EXAMPLE emacs-lisp
 (require 'package)
#+END_EXAMPLE

Disable automatic package loading.
#+BEGIN_EXAMPLE emacs-lisp
 (setq package-enable-at-startup nil)
 (package-initialize)
#+END_EXAMPLE

This code provides a source list of package archives, from which to install packages.
#+BEGIN_EXAMPLE emacs-lisp
 (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
 (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
 (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
#+END_EXAMPLE

Refresh the last view of the elisp archives.
#+BEGIN_EXAMPLE emacs-lisp
 (unless package-archive-contents
   (package-refresh-contents))
(setq package-load-list '(all))
#+END_EXAMPLE

Use-package is a special set of macros to automatically install and
load packages from the init.el file, this needs to be
"bootstrapped" before we can use it.
#+BEGIN_EXAMPLE emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(require 'bind-key)
(require 'diminish)
#+END_EXAMPLE

Org-mode is required for evaluating code-blocks via babel.
#+BEGIN_EXAMPLE emacs-lisp
(require 'org)
#+END_EXAMPLE

This ensures emacs always follows symlinks to the version-controlled source.
#+BEGIN_EXAMPLE emacs-lisp
(setq vc-follow-symlinks t)
#+END_EXAMPLE

Load the main-configuration file. "Literally this file".
#+BEGIN_EXAMPLE emacs-lisp
(org-babel-load-file "~/.emacs.d/configuration.org")
#+END_EXAMPLE

* Hide certain modes from the modeline

*Harry:* I'd rather have only a few necessary mode identifiers on my modeline.
This either hides or "renames" a variety of major or minor modes using the
=diminish= package.

I use Harry's macros for completeness. If a package is setup with =use-package=,
please use the =:diminish= option there instead.

#+BEGIN_SRC emacs-lisp
  (defmacro diminish-minor-mode (filename mode &optional abbrev)
    `(eval-after-load (symbol-name ,filename)
       '(diminish ,mode ,abbrev)))

  (defmacro diminish-major-mode (mode-hook abbrev)
    `(add-hook ,mode-hook
               (lambda () (setq mode-name ,abbrev))))

  (diminish-minor-mode 'abbrev 'abbrev-mode)
  (diminish-minor-mode 'simple 'auto-fill-function)
  (diminish-minor-mode 'subword 'subword-mode)
  (diminish-minor-mode 'undo-tree 'undo-tree-mode)
  (diminish-major-mode 'emacs-lisp-mode-hook "el")
  (diminish-major-mode 'lisp-interaction-mode-hook "Î»")
  (diminish-major-mode 'python-mode-hook "Py")
#+END_SRC

* Auto-compile
Always compile packages and use the newest available.
#+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :config (auto-compile-on-load-mode)
  :ensure t)
(setq load-prefer-newer t)
#+END_SRC

* Sub-configuration modules
Below is a list of sub-configurations which are loaded to provide certain types
of functionality. If you dislike or would like to stop using a particular module, simply
comment it out.
#+BEGIN_SRC emacs-lisp
		 (setq rjh/load-config-modules '(
			"org.org"
			"org-gantt.org"
			"backup.org"
			"yasnippet.org"
			"workgroups.org"
			"abbrev.org"
			"company.org"
			"mutt.org"
			"crypto.org"
			"theme.org"
			"text.org"
			"python.org"
			"study.org"
			"undo.org"
			"graph.org"
			"uml.org"
			"telephone-line.org"
			"latex.org"
			"java.org"
			"recent.org"
			"rtags.org"
			"irony.org"
		  "numbers.org"
			"mule.org"
		))
#+END_SRC

All of these use =use-package= to install packages, with the =:ensure t= option.
If you are loading this for the first time, make sure you have an internet
connection.

I typically load an emacs server (=emacs --daemon=), and edit files using
=emacsclient -c=. This loads a new frame for each file I edit.
If I am already inside emacs, I will use =C-x C-f= to find a file and load it.

If you are new to emacs, (like I was) my process to start off was:
 * I started off with the tutorial =C-h t=.
 * I moved on to the [[info:info][*info*]] tutorial =C-h i=. The *info* pages are super
   helpful, and easy to navigate once you learn how.
 * Then I spent weeks crafting my configuration to get the setup I wanted,
   typically most of this was spent on configuring org and reading info pages.

These are functions used to load the configuration modules.

#+BEGIN_SRC emacs-lisp
(setq rjh/local-config-dir (expand-file-name "config" rjh/local-config-repo ))
#+END_SRC

Load a single configuration file.
#+BEGIN_SRC emacs-lisp
	(defun rjh/load-config (pkg_a)
		(org-babel-load-file
		 (expand-file-name pkg_a rjh/local-config-dir)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
	(defun rjh/load-all-config ()
		(let (value)
			 (dolist (pkg_a rjh/load-config-modules value)
					(rjh/load-config pkg_a))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(rjh/load-all-config)
#+END_SRC

.

* Authentication
=oauth= package.
Mainly for Google authentication.
#+BEGIN_SRC emacs-lisp
	(use-package "oauth2" :ensure t)
#+END_SRC

* Git
I use =magit= for git integration.
The following key-bindings are for global convenience.
Use =C-x g ?= to get a quick command listing.
#+BEGIN_SRC emacs-lisp
	(use-package magit
		:ensure t
		:pin melpa-stable
		:bind (("C-x g" . magit-status)
					 ("C-x M-g" . magit-dispatch-popup)))
#+END_SRC

Git time-machine provides a mode for traversing the git history of a file.
Use =M-x git-timemachine=, =np= to navigate and =q= to quit.
#+BEGIN_SRC emacs-lisp
	(use-package "git-timemachine" :ensure t )
#+END_SRC

* Org Extras

Add pretty bullets for org-mode.
#+BEGIN_SRC emacs-lisp
	(use-package "org-bullets" :ensure t )
#+END_SRC

Emacs speaks statistics package.
#+BEGIN_SRC emacs-lisp
	(use-package "ess" :ensure t)
	(require 'ess-site)
#+END_SRC

Emacs org-caldav package for calendar integration.
#+BEGIN_SRC emacs-lisp
	(use-package "org-caldav" :ensure t)
#+END_SRC

* eVil
The emacs VI interface layer.
For those who prefer the feel of Vi on emacs.
#+BEGIN_SRC emacs-lisp
	(use-package evil
		:ensure t
		:config
		(require 'evil)
		(evil-mode t))
#+END_SRC

* Finding files
The following commands will help you when locating files.
    - find-file :: Opens up a file buffer
									 ( =C-x C-f= )
		- find-dired :: Opens up a directory buffer.
		- find-name-dired :: Finds files matching a pattern.
		- find-grep-dired :: Finds files containing a pattern.

In any of the =dired= buffers you can perform certain actions.
For example to start a =query-replace-regexp=, hit the =Q= key.

For more information, hit =?= inside any =dired= buffer.
And =h= for more advanced help.

* Address-book
BBDB, The insidious big brother database.
#+BEGIN_SRC emacs-lisp
	(use-package bbdb
	:ensure t
	:init
	(require 'bbdb)
	(setq bbdb-file "~/.bbdb/bbdb"
				bbdb-phone-style nil)
	(bbdb-initialize 'message)
	(bbdb-insinuate-message)
	)
#+END_SRC

BBDB vcard import/export.
Use =bbdb-vcard-import-file= to import a vcard file.
And =bbdb-vcard-export-file= to export a vcard file.
#+BEGIN_SRC emacs-lisp
	(use-package bbdb-vcard
		:ensure t
		:init
		(require 'bbdb-vcard)
		(setq bbdb-vcard-directory "~/.bbdb"))
#+END_SRC

* Calendar
 Calfw - The pretty Calendar
	#+BEGIN_SRC emacs-lisp
		(use-package "calfw"
			:ensure t
			:init
			(rjh/load-config "calfw.org")
			:bind ("C-x a c" . rjh/two-week-view))

		(use-package "calfw-org"
			:ensure t
			:init
			(require 'calfw-org)
			(setq cfw:org-overwrite-default-keybinding t)) ;; Org-mode like keybindings

		(use-package "calfw-ical"
			:ensure t
			:init
			(require 'calfw-ical))

		(use-package "calfw-cal"
			:ensure t
			:init
			(require 'calfw-cal))
	#+END_SRC

Diary mode configuration.
#+BEGIN_SRC emacs-lisp
(rjh/load-config "diary.org")
#+END_SRC

* Emacs lisp
An api for working with files in Emacs lisp.
( https://github.com/rejeep/f.el )
#+BEGIN_SRC emacs-lisp
	(use-package "f" :ensure t )
#+END_SRC

* Fonts
Setup font functions, mostly courtesy of Harry Schwartz.
#+BEGIN_SRC emacs-lisp
(rjh/load-config "fonts.org")
#+END_SRC

* Startup
Start-up configuration.
#+BEGIN_SRC emacs-lisp
(rjh/load-config "startup.org")
#+END_SRC
