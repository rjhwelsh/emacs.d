#+TITLE: EMACS configuration
#+AUTHOR: Roger J. H. Welsh
#+EMAIL: rjhwelsh@gmail.com
#+PROPERTY: header-args    :results silent
#+STARTUP: content

* Introduction
Originally inspired by Harry R. Schwartz. Your excellent introduction to
org-mode has inspired this.
* Harry's sensible-defaults.el
You can find this file, [[https://github.com/hrs/sensible-defaults.el][here]].
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/sensible-defaults.el")
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
#+END_SRC

* Personal Details
I would like to be able to share my config with other people to ease their
journey into emacs, as many others examples have done for me.
At the same time I would like to keep personal information private, so I source
a separate personal.org file, which is not included my repository.
#+BEGIN_SRC emacs-lisp
(org-babel-load-file "~/.emacs.d/personal.org")
#+END_SRC
.
* Init.el Comments
The following is commented out (as examples) , because it is required in the
init.el file; such that the latest version of org can be loaded before this file
is executed itself by *org*.

The package library is required for package management.
#+BEGIN_EXAMPLE emacs-lisp
 (require 'package)
#+END_EXAMPLE

Disable automatic package loading.
#+BEGIN_EXAMPLE emacs-lisp
 (setq package-enable-at-startup nil)
 (package-initialize)
#+END_EXAMPLE

This code provides a source list of package archives, from which to install packages.
#+BEGIN_EXAMPLE emacs-lisp
 (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
 (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
 (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
#+END_EXAMPLE

Refresh the last view of the elisp archives.
#+BEGIN_EXAMPLE emacs-lisp
 (unless package-archive-contents
   (package-refresh-contents))
(setq package-load-list '(all))
#+END_EXAMPLE

Use-package is a special set of macros to automatically install and
load packages from the init.el file, this needs to be
"bootstrapped" before we can use it.
#+BEGIN_EXAMPLE emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(require 'bind-key)
(require 'diminish)
#+END_EXAMPLE

Org-mode is required for evaluating code-blocks via babel.
#+BEGIN_EXAMPLE emacs-lisp
(require 'org)
#+END_EXAMPLE

This ensures emacs always follows symlinks to the version-controlled source.
#+BEGIN_EXAMPLE emacs-lisp
(setq vc-follow-symlinks t)
#+END_EXAMPLE

Load the main-configuration file. "Literally this file".
#+BEGIN_EXAMPLE emacs-lisp
(org-babel-load-file "~/.emacs.d/configuration.org")
#+END_EXAMPLE

* Hide certain modes from the modeline

*Harry:* I'd rather have only a few necessary mode identifiers on my modeline.
This either hides or "renames" a variety of major or minor modes using the
=diminish= package.

I use Harry's macros for completeness. If a package is setup with =use-package=,
please use the =:diminish= option there instead.

#+BEGIN_SRC emacs-lisp
  (defmacro diminish-minor-mode (filename mode &optional abbrev)
    `(eval-after-load (symbol-name ,filename)
       '(diminish ,mode ,abbrev)))

  (defmacro diminish-major-mode (mode-hook abbrev)
    `(add-hook ,mode-hook
               (lambda () (setq mode-name ,abbrev))))

  (diminish-minor-mode 'abbrev 'abbrev-mode)
  (diminish-minor-mode 'simple 'auto-fill-function)
  (diminish-minor-mode 'subword 'subword-mode)
  (diminish-minor-mode 'undo-tree 'undo-tree-mode)
  (diminish-major-mode 'emacs-lisp-mode-hook "el")
  (diminish-major-mode 'lisp-interaction-mode-hook "Î»")
  (diminish-major-mode 'python-mode-hook "Py")
#+END_SRC

* Auto-compile
Always compile packages and use the newest available.
#+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :config (auto-compile-on-load-mode)
  :ensure t)
(setq load-prefer-newer t)
#+END_SRC

* Sub-configuration modules
Below is a list of sub-configurations which are loaded to provide certain types
of functionality. If you dislike or would like to stop using a particular module, simply
comment it out.
#+BEGIN_SRC emacs-lisp
		 (setq rjh/load-config-modules '(
			"recent.org"
		  "numbers.org"
			"mule.org"
		))
#+END_SRC

All of these use =use-package= to install packages, with the =:ensure t= option.
If you are loading this for the first time, make sure you have an internet
connection.

I typically load an emacs server (=emacs --daemon=), and edit files using
=emacsclient -c=. This loads a new frame for each file I edit.
If I am already inside emacs, I will use =C-x C-f= to find a file and load it.

If you are new to emacs, (like I was) my process to start off was:
 * I started off with the tutorial =C-h t=.
 * I moved on to the [[info:info][*info*]] tutorial =C-h i=. The *info* pages are super
   helpful, and easy to navigate once you learn how.
 * Then I spent weeks crafting my configuration to get the setup I wanted,
   typically most of this was spent on configuring org and reading info pages.

These are functions used to load the configuration modules.

#+BEGIN_SRC emacs-lisp
(setq rjh/local-config-dir (expand-file-name "config" rjh/local-config-repo ))
#+END_SRC

Load a single configuration file.
#+BEGIN_SRC emacs-lisp
	(defun rjh/load-config (pkg_a)
		(org-babel-load-file
		 (expand-file-name pkg_a rjh/local-config-dir)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
	(defun rjh/load-all-config ()
		(let (value)
			 (dolist (pkg_a rjh/load-config-modules value)
					(rjh/load-config pkg_a))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(rjh/load-all-config)
#+END_SRC

.

* eVil
The emacs VI interface layer.
For those who prefer the feel of Vi on emacs.
#+BEGIN_SRC emacs-lisp
	(use-package evil
		:ensure t)
#+END_SRC

* Org
To see the complete org configuration, see [[file:config/org.org][org.org]].
#+BEGIN_SRC emacs-lisp
(rjh/load-config "org.org" )
(rjh/load-config "org-gantt.org" )
#+END_SRC

Add pretty bullets for org-mode.
#+BEGIN_SRC emacs-lisp
	(use-package "org-bullets" :ensure t )
#+END_SRC

Emacs speaks statistics package.
#+BEGIN_SRC emacs-lisp
	(use-package "ess" :ensure t)
	(require 'ess-site)
#+END_SRC

Emacs org-caldav package for calendar integration.
#+BEGIN_SRC emacs-lisp
	(use-package "org-caldav" :ensure t)
#+END_SRC

* Yasnippet
Yasnippet provides a templating engine for Emacs.
For more, see [[file:config/yasnippet.org][yasnippet.org]].
N.B. For html tags use emmet-mode instead of yasnippet.
#+BEGIN_SRC emacs-lisp
	(use-package popup :ensure t)
	(use-package "yasnippet"
		:ensure t
		:diminish yas-minor-mode
		:init
		(require 'yasnippet)
		(yas-global-mode 1) ; enable globally
		:config
		(rjh/load-config "yasnippet.org"))
	(use-package "yasnippet-snippets" :ensure t) ;; Official snippets by AndreaCrotti
#+END_SRC

* Company
Company-mode provides auto-completion features for many other modes.

Company mode has some compatibility issues with yasnippet.
For more see [[file:config/company.org::*Yasnippet%20compatibility][Yasnippet compatibility]].

#+BEGIN_SRC emacs-lisp
	(use-package company
		:ensure t
		:diminish company-mode
		:init
		(setq company-global-modes t)
		(global-company-mode 1)
		(setq company-idle-delay 0.8)
		(setq company-minimum-prefix-length 2)
		(rjh/load-config "company.org"))
#+END_SRC

* Latex
Latex configuration.
For more see [[file:config/latex.org][latex.org]].
#+BEGIN_SRC emacs-lisp
(rjh/load-config "latex.org")
#+END_SRC

* Graph
Some packages for graphing.
#+BEGIN_SRC emacs-lisp
		(use-package "gnuplot" :ensure t )
		(use-package "graphviz-dot-mode" :ensure t )
#+END_SRC

* UML
Plantuml for uml diagramming.
PlantUML is a java program for quickly constructing uml diagrams.
http://plantuml.com/
https://github.com/skuro/plantuml-mode

Flycheck is used for syntax checking.
https://github.com/alexmurray/flycheck-plantuml

#+BEGIN_SRC emacs-lisp
	(use-package "plantuml-mode" :ensure t
		:init
		(setq plantuml-jar-path "/usr/share/plantuml/lib/plantuml.jar")
		(add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
		(add-to-list
		 'org-src-lang-modes '("plantuml" . plantuml))
		(setq org-plantuml-jar-path plantuml-jar-path)
		:config
		(plantuml-set-output-type "svg"))

	(use-package "flycheck-plantuml"
		:init
		(with-eval-after-load 'flycheck
			(require 'flycheck-plantuml)
			(flycheck-plantuml-setup))
		:ensure t)
#+END_SRC

* Git
I use =magit= for git integration.
The following key-bindings are for global convenience.
Use =C-x g ?= to get a quick command listing.
#+BEGIN_SRC emacs-lisp
	(use-package magit
		:ensure t
		:pin melpa-stable
		:bind (("C-x g" . magit-status)
					 ("C-x M-g" . magit-dispatch-popup)))
#+END_SRC

Git time-machine provides a mode for traversing the git history of a file.
Use =M-x git-timemachine=, =np= to navigate and =q= to quit.
#+BEGIN_SRC emacs-lisp
	(use-package "git-timemachine" :ensure t )
#+END_SRC

* Java
JDEE - Java Development Environment for Emacs

The jdee-server should be installed on your system, if it isn't please use the
following link to install the latest version. [[https://github.com/jdee-emacs/jdee-server][jdee-server@github]].
Jdee-server depends on Maven-3.

Setup jdee to use the following server directory, =~/.emacs.d/jdee-server/target=.
This is configurable in personal.org.

Use =M-x jdee-mode= to invoke jdee.

For more documentation, please see http://jdee.sourceforge.net/jdedoc/html/jde-ug/jde-ug.html
#+BEGIN_SRC emacs-lisp
	(use-package "jdee"
		:ensure t
		:config
		(setq jdee-global-classpath '("."))) ;; Use the current working directory as a classpath for java projects.
#+END_SRC

* Python
The Emacs Python Development Environment. This is a full featured environment
for python development. For introspection and analysis of Python sources, Elpy
mainly relies on Jedi. Jedi is known to have some problems coping with
badly-formatted Python.

For more see [[file:config/python.org][python.org]].

#+BEGIN_SRC emacs-lisp
	(use-package "elpy"
		:ensure t
		:init
		(elpy-enable)
		(setq python-indent 2)
		:config
		(rjh/load-config "python.org"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
	(use-package "company-jedi" :ensure t)
#+END_SRC

* Irony                                                               :Cpp:C:
	https://github.com/Sarcasm/irony-mode
irony-mode is an Emacs minor-mode that aims at improving the editing experience
for the C, C++ and Objective-C languages. It works by using a combination of an
Emacs package and a C++ program (irony-server) exposing =libclang=.

This configuration is from [[http://martinsosic.com/development/emacs/2017/12/09/emacs-cpp-ide.html][Martin Sosic]].

Brief note.
Irony is faster, and rtags is more feature-complete.

For complete installation details please see https://github.com/Sarcasm/irony-mode#installation

#+BEGIN_SRC emacs-lisp
	(use-package irony
		:ensure t
		:config
		(progn
			;; If irony server was never installed, install it.
			(unless (irony--find-server-executable) (call-interactively #'irony-install-server))
			(add-hook 'c++-mode-hook 'irony-mode)
			(add-hook 'c-mode-hook 'irony-mode)
			;; Use compilation database first, clang_complete as fallback.
			(setq-default irony-cdb-compilation-databases '(irony-cdb-libclang
																												irony-cdb-clang-complete))
			(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
		;; I use irony with company to get code completion.
		(use-package company-irony
			:requires company irony
			:ensure t
			:config
			(progn
				(eval-after-load 'company '(add-to-list 'company-backends 'company-irony))))
#+END_SRC
#+BEGIN_SRC emacs-lisp
		;; I use irony with flycheck to get real-time syntax checking.
		(use-package flycheck-irony
			:requires flycheck irony
			:ensure t
			:config
			(progn
				(eval-after-load 'flycheck '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))))
#+END_SRC
#+BEGIN_SRC emacs-lisp
		;; Eldoc shows argument list of the function you are currently writing in the echo area.
		(use-package irony-eldoc
			:requires eldoc irony
			:ensure t
			:config
			(progn
				(add-hook 'irony-mode-hook #'irony-eldoc)))
#+END_SRC

 Setup is similar to rtags.org (RTag).
 See [[./rtags.org::Setup][rtags.org]] or [[https://github.com/Sarcasm/irony-mode#compilation-database][Compilation Databases]] for more details.

 A compilation database (compile_commands.json) is required.
 See Sarcasm's notes on the [[https://sarcasm.github.io/notes/dev/compilation-database.html][Compilation Database]] for extensive documentation on
 what this is, and why it is important.

*** cmake
	#+BEGIN_EXAMPLE
	cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .
	#+END_EXAMPLE

* Rtags                                                               :Cpp:C:
 This configuration is from [[http://martinsosic.com/development/emacs/2017/12/09/emacs-cpp-ide.html][Martin Sosic]].

 Brief note.
 Irony is faster, and rtags is more feature-complete.

 https://github.com/Andersbakken/rtags
 http://www.rtags.net

 RTags is a client/server application that indexes C/C++ code and keeps a
 persistent file-based database of references, declarations, definitions,
 symbolnames etc.

 #+BEGIN_SRC emacs-lisp
	 (use-package rtags
		 :ensure t
		 :config
		 (progn
		   (setq rtags-path "~/.emacs.d/rtags/build/bin")
			 (unless (rtags-executable-find "rc") (error "Binary rc is not installed!"))
			 (unless (rtags-executable-find "rdm") (error "Binary rdm is not installed!"))

			 (define-key c-mode-base-map (kbd "M-.") 'rtags-find-symbol-at-point)
			 (define-key c-mode-base-map (kbd "M-,") 'rtags-find-references-at-point)
			 (define-key c-mode-base-map (kbd "M-?") 'rtags-display-summary)
			 (rtags-enable-standard-keybindings)

			 (setq rtags-use-helm t)

			 ;; Shutdown rdm when leaving emacs.
			 (add-hook 'kill-emacs-hook 'rtags-quit-rdm)
			 (add-hook 'c-mode-hook 'rtags-start-process-unless-running)
			 (add-hook 'c++-mode-hook 'rtags-start-process-unless-running)
			 (add-hook 'objc-mode-hook 'rtags-start-process-unless-running)))

 #+END_SRC
 #+BEGIN_SRC emacs-lisp
	 ;; TODO: Has no coloring! How can I get coloring?
	 (use-package helm-rtags
		 :requires helm rtags
		 :ensure t
		 :config
		 (progn
			 (setq rtags-display-result-backend 'helm)))
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
	 ;; Use rtags for auto-completion.
	 (use-package company-rtags
		 :requires company rtags
	   :ensure t
		 :config
		 (progn
			 (setq rtags-autostart-diagnostics t)
			 (rtags-diagnostics)
			 (setq rtags-completions-enabled t)
			 (push 'company-rtags company-backends)
			 ))
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
	 ;; Live code checking.
	 (use-package flycheck-rtags
		 :requires flycheck rtags
	   :ensure t
		 :config
		 (progn
			 ;; ensure that we use only rtags checking
			 ;; https://github.com/Andersbakken/rtags#optional-1
			 (defun setup-flycheck-rtags ()
				 (flycheck-select-checker 'rtags)
				 (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
				 (setq-local flycheck-check-syntax-automatically nil)
				 (rtags-set-periodic-reparse-timeout 2.0)  ;; Run flycheck 2 seconds after being idle.
				 )
			 (add-hook 'c-mode-hook #'setup-flycheck-rtags)
			 (add-hook 'c++-mode-hook #'setup-flycheck-rtags)))
 #+END_SRC

** Dependencies
 See https://github.com/Andersbakken/rtags#tldr-quickstart for details.
*** The rtags binaries
	Build the rtags binaries. The following configuration for =Rtags= will make
	them available to emacs.
	#+BEGIN_EXAMPLE bash
	git clone --recursive https://github.com/Andersbakken/rtags.git ~/.emacs.d/rtags
	cd ~/.emacs.d/rtags
	mkdir -vp build
	cd build
	cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ..
	make
	#+END_EXAMPLE

** Setup
 For more details, please see [[https://github.com/Andersbakken/rtags#setup][here]].

 Basically a =compile_commands.json= is required for rtags to work with your
 project. Clang requires information about how your sources are compiled in order
 to properly index them.

 #+BEGIN_EXAMPLE
 rc -c gcc -I... -fsomeflag -c foobar.c
 rc -J /path/to/a/directory/containing/compile_commands.json
 #+END_EXAMPLE

 You can generate a compile_commands.json with various different tools, one might
 fit better than the other, depending on your project build system. See below for
 examples.

*** ninja
 #+BEGIN_EXAMPLE
 ninja -t compdb cxx cc > compile_commands.json
 rc -J
 #+END_EXAMPLE
*** cmake
 #+BEGIN_EXAMPLE
 cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .
 rc -J
 #+END_EXAMPLE
*** bear
 For other projects, see [[https://github.com/rizsotto/Bear][Bear]].
 #+BEGIN_EXAMPLE
 make clean
 bear make
 rc -J
 # Parse commands for a specific target only
 make clean
 bear make rdm
 rc -J
 #+END_EXAMPLE
*** make
 For not too complex makefiles, you can do this.
 #+BEGIN_EXAMPLE
 make clean
 make -nk | rc -c -
 #+END_EXAMPLE
*** mitm
 You can also *man-in-the-middle* your gcc, cc, c++ commands such that rc will
 make sure RTags knows about it.
 #+BEGIN_EXAMPLE
 ln -s /path/to/rtags/bin/gcc-rtags-wrapper.sh /somewhere/that/is/in/your/path/before/usr/bin/gcc
 ln -s /path/to/rtags/bin/gcc-rtags-wrapper.sh /somewhere/that/is/in/your/path/before/usr/bin/c++
 ln -s /path/to/rtags/bin/gcc-rtags-wrapper.sh /somewhere/that/is/in/your/path/before/usr/bin/cc
 ln -s /path/to/rtags/bin/gcc-rtags-wrapper.sh /somewhere/that/is/in/your/path/before/usr/bin/g++
 #+END_EXAMPLE
 RTags will group source files into projects based on some heuristics.

* Code browser
ECB - The Emacs code browser.
For more information, see http://ecb.sourceforge.net/.
#+BEGIN_SRC emacs-lisp
	(use-package "ecb"
		:ensure t )
#+END_SRC

* Finding files
The following commands will help you when locating files.
    - find-file :: Opens up a file buffer
									 ( =C-x C-f= )
		- find-dired :: Opens up a directory buffer.
		- find-name-dired :: Finds files matching a pattern.
		- find-grep-dired :: Finds files containing a pattern.

In any of the =dired= buffers you can perform certain actions.
For example to start a =query-replace-regexp=, hit the =Q= key.

For more information, hit =?= inside any =dired= buffer.
And =h= for more advanced help.

* Spell checker
#+BEGIN_SRC emacs-lisp
	(use-package "flycheck" :ensure t
		:diminish flycheck-mode
		:diminish flyspell-mode)
#+END_SRC
* Flash cards
Pamparam provides a flashcard engine for org documents.
For more details see [[file:config/pamparam.org][pamparam.org]].
#+BEGIN_SRC emacs-lisp
	(use-package "pamparam"
		:ensure t
		:init
		(setq pamparam-path "~/.emacs.d/flashcards.pam")
		(rjh/load-config "pamparam.org"))
#+END_SRC

* Authentication
=oauth= package.
Mainly for Google authentication.
#+BEGIN_SRC emacs-lisp
	(use-package "oauth2" :ensure t)
#+END_SRC

Pinentry for gpg-agent
#+BEGIN_SRC emacs-lisp
	(use-package "pinentry" :ensure t)
#+END_SRC
Please ensure the following setting is enabled for =~/.gnupg/gpg-agent.conf=.
	#+BEGIN_EXAMPLE
	allow-emacs-pinentry
	#+END_EXAMPLE
This is [[https://www.gnu.org/software/emacs/manual/html_mono/epa.html#fnd-1][required]] for GnuPG 2.1.5 or later; if you do not use a graphical
=pinentry= program.

* Mutt
This file provides integration with mutt.
For more see [[file:config/mutt.org][mutt.org]]
#+BEGIN_SRC emacs-lisp
(rjh/load-config "mutt.org")
#+END_SRC

* Address-book
BBDB, The insidious big brother database.
#+BEGIN_SRC emacs-lisp
	(use-package bbdb
	:ensure t
	:init
	(require 'bbdb)
	(setq bbdb-file "~/.bbdb/bbdb"
				bbdb-phone-style nil)
	(bbdb-initialize 'message)
	(bbdb-insinuate-message)
	)
#+END_SRC

BBDB vcard import/export.
Use =bbdb-vcard-import-file= to import a vcard file.
And =bbdb-vcard-export-file= to export a vcard file.
#+BEGIN_SRC emacs-lisp
	(use-package bbdb-vcard
		:ensure t
		:init
		(require 'bbdb-vcard)
		(setq bbdb-vcard-directory "~/.bbdb"))
#+END_SRC

* Calendar
 Calfw - The pretty Calendar
For more information see the configuration file, [[file:config/calfw.org][calfw.org]].
	#+BEGIN_SRC emacs-lisp
		(use-package "calfw"
			:ensure t
			:init
			(rjh/load-config "calfw.org")
			:bind ("C-x a c" . rjh/two-week-view))

		(use-package "calfw-org"
			:ensure t
			:init
			(require 'calfw-org)
			(setq cfw:org-overwrite-default-keybinding t)) ;; Org-mode like keybindings

		(use-package "calfw-ical"
			:ensure t
			:init
			(require 'calfw-ical))

		(use-package "calfw-cal"
			:ensure t
			:init
			(require 'calfw-cal))
	#+END_SRC

Diary mode configuration.
#+BEGIN_SRC emacs-lisp
(rjh/load-config "diary.org")
#+END_SRC

* Emacs lisp
An api for working with files in Emacs lisp.
( https://github.com/rejeep/f.el )
#+BEGIN_SRC emacs-lisp
	(use-package "f" :ensure t )
#+END_SRC

* Workgroups
Workgroups provides defined layouts for Emacs.
( https://github.com/tlh/workgroups.el )
 #+BEGIN_SRC emacs-lisp
	 (use-package "workgroups"
		 :init
		 (require 'workgroups)
		 (workgroups-mode 1)
		 (setq wg-prefix-key (kbd "C-c w"))
		 (wg-load "~/.emacs.d/workgroups" )
		 :ensure t )
 #+END_SRC

Keybindings:
Use the following with <prefix> ;
   + C-c w :: <prefix>
   + c :: wg-create-workgroup
	 + A :: wg-rename-workgroup
	 + v :: wg-switch-to-workgroup
	 + n/p :: next/prev workgroup
	 + 0-9 :: switch thru positions in list
	 + w :: wg-toggle-morph (animation)
	 + C-s/l :: save / load workgroup
   + k :: kill workgroup
   + ,/. :: move left/right in group listing
	 + ? :: wg-help

* Themes
Use the =diff-hl= package to highlight changed-and-uncommitted lines when
programming.
#+BEGIN_SRC emacs-lisp
	(use-package diff-hl
	:ensure t
	:init
	(require 'diff-hl)
	(add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
	(add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+END_SRC

For more on themes, checkout [[file:config/theme.org][theme.org]].
#+BEGIN_SRC emacs-lisp
	(use-package "material-theme" :ensure t )
	(use-package "solarized-theme"
		:ensure t
		:config
		(defun hrs/apply-theme ()
			(setq solarized-use-variable-pitch nil)
			(setq solarized-height-plus-1 1.0)
			(setq solarized-height-plus-2 1.0)
			(setq solarized-height-plus-3 1.0)
			(setq solarized-height-plus-4 1.0)
			(setq solarized-high-contrast-mode-line t)
			(load-theme 'solarized-dark t)))
	(use-package "fill-column-indicator" :ensure t )
(rjh/load-config "theme.org")
#+END_SRC

Miscellaneous text options.
For more info see [[file:config/text.org][text.org]].
#+BEGIN_SRC emacs-lisp
(rjh/load-config "text.org")
#+END_SRC

* Telephone line
A pretty message bar for Emacs.
( https://github.com/dbordak/telephone-line )
#+BEGIN_SRC emacs-lisp
	(use-package telephone-line
	 :ensure t
	 :config
	 (rjh/load-config "telephone-line.org"))
;	 :init
	 (require 'telephone-line)
	 (telephone-line-mode 1)
#+END_SRC

* Abbrev
Abbreviation configuration.
For more see [[file:config/abbrev.org][abbrev.org]].
#+BEGIN_SRC emacs-lisp
(rjh/load-config "abbrev.org")
#+END_SRC
* Fonts
Setup font functions, mostly courtesy of Harry Schwartz.
For more see [[file:config/fonts.org][fonts.org]].
#+BEGIN_SRC emacs-lisp
(rjh/load-config "fonts.org")
#+END_SRC

* Backups
Setup file backup behaviour for Emacs.
For more see [[file:config/backup.org][backup.org]].
#+BEGIN_SRC emacs-lisp
(rjh/load-config "backup.org")
#+END_SRC

* Undo tree
By default =C-/= will undo.
Now =C-S-/= will redo.
=C-x u= will provide a visual undo tree which can be navigated with the arrow
keys. Type =q= to exit.

See [[http://pragmaticemacs.com/emacs/advanced-undoredo-with-undo-tree/][here]] for examples.
#+BEGIN_SRC emacs-lisp
	(use-package "undo-tree"
		:ensure t
		:init
		(global-undo-tree-mode 1)
		(defalias 'redo 'undo-tree-redo)
		(global-set-key (kbd "C-S-/") 'redo))
#+END_SRC

* Startup
Start-up configuration.
For more see [[file:config/startup.org][startup.org]].
#+BEGIN_SRC emacs-lisp
(rjh/load-config "startup.org")
#+END_SRC
