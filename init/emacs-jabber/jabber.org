#+PROPERTY: header-args    :results silent
* Jabber
jabber.el aims to be a minimal Jabber client.
http://emacs-jabber.sourceforge.net/
https://www.emacswiki.org/emacs/JabberEl

#+begin_src emacs-lisp
  (use-package "jabber"
    :ensure t
    :after dired-x ;; dired-x overrides jabber-global-keymap prefix
    :config

    ;; Enable history
    (setq
     jabber-history-enabled t
     jabber-use-global-history nil
     jabber-backlog-number 40
     jabber-backlog-days 30
     )

    ;; Disable avatar images in roster "-%a"
    (setq jabber-roster-line-format " %c %-25n %u %-8s  %S")

    :bind-keymap ("C-x C-j" . jabber-global-keymap)
    )

  (use-package "jabber"
    :bind (:map jabber-chat-mode-map
		("RET" . newline)
		("C-\r" . jabber-chat-buffer-send))
    )
#+end_src

- =C-x C-j C-h= :: display a list of available jabber commands

** Notifications
https://www.emacswiki.org/emacs/notify.el


Specify notification configuration, to be loaded after notify.el.
Use =(rjh/use "emacswiki/notify:init")= to add notification support.

#+begin_src emacs-lisp
  (use-package "jabber"
    :after notify
    :init
    (defun notify-jabber-notify (from buf text proposed-alert)
      "(jabber.el hook) Notify of new Jabber chat messages via notify.el"
      (when (or jabber-message-alert-same-buffer
		(not (memq (selected-window) (get-buffer-window-list buf))))
	(if (jabber-muc-sender-p from)
	    (notify (format "(PM) %s"
			    (jabber-jid-displayname (jabber-jid-user from)))
		    (format "%s: %s" (jabber-jid-resource from) text)))
	(notify (format "%s" (jabber-jid-displayname from))
		text)))

    (add-hook 'jabber-alert-message-hooks 'notify-jabber-notify)
  )
#+end_src
