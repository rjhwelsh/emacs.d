#+PROPERTY: header-args    :results silent
* Theme scheduler

Changes theme based on the time of the day.

Automatic theme changer.

Variables
#+begin_src emacs-lisp
  (defvar rjh/theme-schedule-alist nil
    "An association list of themes and hours of the day.
       Will change theme during and after specified hour.

      For example;
      (list
       (7 . 'solarized-light) ;; Use the light theme after 7am
       (19 . 'solarized-dark) ;; Use the dark theme after 7pm

      ;; You can even specify a list, to add themes in sequence
      ;; Or tweak a theme after loading it
       (21 . '(solarized-dark 'solarized-dark-modifier-theme)) ;; Change between themes in series
  "
    )

  (defvar rjh/theme-schedule-default nil
    "Default theme to load, if no theme matches current schedule."
    )
#+end_src

Function
#+begin_src emacs-lisp
  (require 'async)
  (defun rjh/theme-scheduler (&optional repeat)
    "Changes theme according to the time."
    (async-start
     ;; Select theme asynchronously
     `(lambda ()
	(progn
	  ,(async-inject-variables "\\`rjh/theme-schedule-")
	  (let* (
		 (hour
		  (decoded-time-hour
		   (decode-time (current-time))))
		 (theme-alist ;;rjh/theme-schedule-alist)
		  (sort
		   ;; Warning ! sort is destructive,
		   ;;    weird bug causes list to be truncated if not copied
		   ;;    reverse also copies the list here ...
		   (reverse rjh/theme-schedule-alist)
		   (lambda (a b) (> (car a) (car b))))
		  )
		 (theme-default rjh/theme-schedule-default)

		 ;; Finds first theme alist-pair greater than or equal to the hour
		 (theme
		  (alist-get hour
			     theme-alist
			     theme-default ;; Default if no theme matches
			     nil
			     '<=)
		  )
		 ) theme))) ;; Return theme
     (lambda (theme)
       (when theme
	 (cond
	  ((listp theme)
	    (dolist (th theme)
	    (message "Changing theme to %s" (symbol-name th))
	    (load-theme th t)))
	  ((symbolp theme)
	   (message "Changing theme to %s" (symbol-name theme))
	   (load-theme theme t))
	 ))) ;; Load theme if a switch is detected
     )
    (when repeat
      (run-with-timer (* 1 60 60) nil 'rjh/theme-scheduler t) ;; Change theme every hour
      ))
#+end_src
