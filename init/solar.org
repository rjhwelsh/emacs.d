#+TITLE: Sunrise/Sunset functions
#+AUTHOR: Roger J. H. Welsh
#+EMAIL: rjhwelsh@posteo.net
#+PROPERTY: header-args    :results silent

These functions have been taken from.
https://stackoverflow.com/questions/22889036/custom-diary-sunrise-function-not-working-autoload-diary-emacs
Credit to Brady Trainor.

These functions build on solar.el
#+begin_src emacs-lisp
(require 'solar)
#+end_src

* Sunrise
	#+begin_src emacs-lisp
	(defun solar-sunrise-string (date &optional nolocation)
  "String of *local* time of sunrise and daylight on Gregorian DATE."
  (let ((l (solar-sunrise-sunset date)))
    (format
     "%s (%s hours daylight)"
     (if (car l)
     (concat (apply 'solar-time-string (car l)) " Sunrise")
       "no sunrise")
     (nth 2 l)
     )))
;; To be called from diary-list-sexp-entries, where DATE is bound.
;;;###diary-autoload
(defun diary-sunrise ()
  "Local time of sunrise as a diary entry.
  Accurate to a few seconds."
  (or (and calendar-latitude calendar-longitude calendar-time-zone)
      (solar-setup))
  (solar-sunrise-string date))
	#+end_src

* Sunset
	#+begin_src emacs-lisp
	(defun solar-sunset-string (date &optional nolocation)
  "String of *local* time of sunset and daylight on Gregorian DATE."
  (let ((l (solar-sunrise-sunset date)))
    (format
     "%s (%s hours daylight)"
     (if (cadr l)
     (concat (apply 'solar-time-string (cadr l)) " Sunset" )
       "no sunset")
     (nth 2 l)
     )))
;; To be called from diary-list-sexp-entries, where DATE is bound.
;;;###diary-autoload
(defun diary-sunset ()
  "Local time of sunset as a diary entry.
  Accurate to a few seconds."
  (or (and calendar-latitude calendar-longitude calendar-time-zone)
      (solar-setup))
  (solar-sunset-string date))
	#+end_src

* Patch :org:org:agenda:
Add a patch to allow times to be defined with sexp-expressions.
Time is defined in the string portion returned by the sexp.
The time must be at the start of the string.

** org.el
Define function to obtain time from sexp expressions.
#+begin_src emacs-lisp
	(defun org-timestamp-from-sexp (s d)
		"Convert Org timestamp S, as a sexp-string, into a timestamp object for date D.
				Return nil if S is not a valid timestamp sexp"
		(let (
					(ts
					 (format "%04d"
									 (diary-entry-time
										(diary-sexp-entry s "" d)))
					 ))
			(string-match "\\(..\\)\\(..\\)" ts)
			(concat
			 (match-string 1 ts)
			 ":"
			 (match-string 2 ts))
			)
		)
	(org-timestamp-from-sexp "(diary-sunrise)" (calendar-current-date))
#+end_src
