#+TITLE: Org-mode base configuration
#+AUTHOR: Roger J. H. Welsh
#+EMAIL: rjhwelsh@gmail.com
#+PROPERTY: header-args    :results silent
#+STARTUP: content

The base configuration for org-mode. 

* Packages
  The default org should be setup to be installed via the init.el file in your
  emacs.d directory. This ensures the latest org-mode is used, and not the default
  provided with your emacs binaries. The following example illustrates the
  Emacs-lisp commands that bootstrap org-mode, before processing the org-files as
  specified by your configuration.org.

  #+BEGIN_EXAMPLE
  (unless (package-installed-p 'org-plus-contrib)
    (package-install 'org-plus-contrib))
  (require 'org)
  (org-babel-load-file "~/.emacs.d/configuration.org")
  #+END_EXAMPLE

  The following load-path is used for org-plus-contrib packages.
  It will automatically expand to the first available org-plus-contrib
  package in elpa.
  #+BEGIN_SRC emacs-lisp
    (add-to-list
     'load-path
     (car (file-expand-wildcards "~/.emacs.d/elpa/org-plus-contrib*" ))
     )
  #+END_SRC
* Setup
  For a minimal =.emacs= for =org-mode=, see [[http://orgmode.org/worg/org-faq.html#minimal-emacs][here]].
  #+BEGIN_SRC emacs-lisp
    (require 'org-agenda)
  #+END_SRC
  Enable extension modules for org-mode
  #+BEGIN_SRC emacs-lisp
    (eval-after-load 'org
      '(org-load-modules-maybe t))
  #+END_SRC

** =Contrib/= packages
*** org-checklist 
    Org-checklist resets check-boxes for entries that have the property =RESET_CHECK_BOXES= set to =t.
    Org-checklist requires =a2ps= installed on your system of choice for exporting as postscript.
   #+begin_src emacs-lisp
     (require 'org-checklist)
     (defun org-toggle-reset-check-boxes-property ()
	(interactive)
	(let* ((prop "RESET_CHECK_BOXES")
	      (value (org-entry-get nil prop)))	      
	  (if value 
	      (org-delete-property prop)
	      (org-entry-put nil "RESET_CHECK_BOXES" "t"))))
     (define-key org-mode-map (kbd "C-c C-x r") 'org-toggle-reset-check-boxes-property)
   #+end_src
*** org-learn
    Org-learn provides super-memo spaced repetition scheduling.
    Use =org-smart-reschedule= to re-schedule tasks based on super-memo.
    It is assigned to =C-c m= for memorization.
    #+begin_src emacs-lisp
    (require 'org-learn)
    (define-key org-mode-map "\C-cm" 'org-smart-reschedule) 
    #+end_src

** Use private variables
#+begin_src emacs-lisp
  (rjh/use "org/org:private")
#+end_src
** Application Defaults
   Default application associations.
   #+BEGIN_SRC emacs-lisp
     (setq org-file-apps
	   '((auto-mode . emacs)
	     ("\\.x?html?\\'" . "firefox %s")
	     ("\\.pdf\\'" . "evince \"%s\"")
	     ("\\.pdf::\\([0-9]+\\)\\'" . "evince \"%s\" -p %1")
	     ))
   #+END_SRC
   Link frame setup. Prevent windows from splitting.
   #+BEGIN_SRC emacs-lisp
     (setq org-link-frame-setup
	   '((file . find-file)
	     ))
   #+END_SRC

   *Harry:* Exporting to HTML and opening the results triggers
   =/usr/bin/sensible-browser=, which checks the =$BROWSER= environment variable to
   choose the right browser. I'd like to always use Firefox, so:
   #+BEGIN_SRC emacs-lisp
     (setenv "BROWSER" "firefox")
   #+END_SRC
** Keybindings
*** Global
    #+begin_src emacs-lisp
      (define-key global-map "\C-cl" 'org-store-link)
      (define-key global-map "\C-ca" 'org-agenda)
      (define-key global-map "\C-cc" 'org-capture)
      (define-key global-map (kbd "C-c C-x C-j") 'org-clock-goto)
      (define-key global-map (kbd "C-c C-x C-o") 'org-clock-out)
    #+end_src
*** Org-mode
    #+begin_src emacs-lisp
      (define-key org-mode-map "\C-ce" 'rjh/org-tags-expire)
      (define-key org-mode-map "\C-c\M-r" 'org-id-refile-to-prev)
    #+end_src
*** Org-agenda-mode
    #+begin_src emacs-lisp
      (define-key org-agenda-mode-map "\C-ce" 'rjh/org-tags-expire-agenda)
    #+end_src
** Hooks
*** auto-align tags before save
    Align all visible tags in the buffer.
    #+begin_src emacs-lisp
      (add-hook 'org-mode-hook
		(lambda ()
		  (add-hook 'before-save-hook
			    (lambda ()
			      (org-align-tags t)
			      )
			    nil
			    'local)
		  ))
    #+end_src
*** fix <> parenthesis matching
    #+begin_src emacs-lisp
      ;; Taken from: https://emacs.stackexchange.com/questions/50216/org-mode-code-block-parentheses-mismatch
      (defun org-mode-<>-syntax-fix (start end)
	"Change syntax of characters ?< and ?> to symbol within source code blocks."
	(let ((case-fold-search t))
	  (when (eq major-mode 'org-mode)
	    (save-excursion
	      (goto-char start)
	      (while (re-search-forward "<\\|>" end t)
		(when (save-excursion
			(and
			 (re-search-backward "[[:space:]]*#\\+\\(begin\\|end\\)_src\\_>" nil t)
			 (string-equal (match-string 1) "begin")))
		  ;; This is a < or > in an org-src block
		  (put-text-property (point) (1- (point))
				     'syntax-table (string-to-syntax "_"))))))))

      (defun org-setup-<>-syntax-fix ()
	"Setup for characters ?< and ?> in source code blocks.
			      Add this function to `org-mode-hook'."
	(setq syntax-propertize-function 'org-mode-<>-syntax-fix)
	(syntax-propertize (point-max)))

      (add-hook 'org-mode-hook #'org-setup-<>-syntax-fix)
    #+end_src

** Postscript
*** Add paper type
    Collins Organiser Refill size.
    #+begin_src emacs-lisp
      (add-to-list 'ps-page-dimensions-database
		   '(collinsorganiser 270 486 "CollinsOrganiserRefill"))
    #+end_src
    Collins Organiser 4-column on A4.
    #+begin_src emacs-lisp
      (add-to-list 'ps-page-dimensions-database
		   `(collinsorg4colA4 486 ,(nth 2 (assoc 'a4 ps-page-dimensions-database)) "CollinsOrganiser4ColumnsOnA4"))
    #+end_src
    Collins Organiser 3-column on A4.
    #+begin_src emacs-lisp
      (add-to-list 'ps-page-dimensions-database
		   `(collinsorg3colA4 486 ,(* 3 270) "CollinsOrganiser3ColumnsOnA4"))
    #+end_src
** Quick Templates
   #+BEGIN_SRC emacs-lisp
     (require 'org-tempo)
   #+END_SRC

   Org structure templates.
   #+BEGIN_SRC emacs-lisp
     (setq org-structure-template-alist
	   (append
	    org-structure-template-alist
	    '(
	      ("el" . "src emacs-lisp")
	      ("py" . "src python")
	      ("sh" . "src sh"))
	    ))
   #+END_SRC

   Inhibit electric pair for org-mode =<=.
   #+begin_src emacs-lisp
     (require 'elec-pair)
     (add-hook
      'org-mode-hook
      (lambda ()
	(setq-local electric-pair-inhibit-predicate
		    `(lambda (c)
		       (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
   #+end_src
* Agenda
Moved mostly to =gtd.org=.
** Log
   #+begin_src emacs-lisp
     (setq org-log-done 'time)   ;; Record when a task moves to the DONE state
     (setq org-log-refile 'time) ;; Record when an item is refiled.
   #+end_src
** Clocking
   #+begin_src emacs-lisp
     (require 'org-clock)
   #+end_src

   To save the clock history across Emacs sessions, use
   #+BEGIN_SRC emacs-lisp
     (setq org-clock-persist 'history)
     (org-clock-persistence-insinuate)
   #+END_SRC

   Effort estimates and column view
   Appointment default durations and effort addition.
   Use C-c C-x C-c to access.
   #+BEGIN_SRC emacs-lisp
     (setq org-global-properties '(("Effort_ALL". "0:10 0:20 0:30 0:45 1:00 3:00 4:00 8:00 9:00 2:00"))
	   org-columns-default-format '"%38ITEM(Details) %7TODO(To Do) %PRIORITY(Pri) %5Effort(Effort){:} %6CLOCKSUM(Clock) %17TIMESTAMP_IA"
	   org-agenda-columns-add-appointments-to-effort-sum t
	   org-agenda-default-appointment-duration 30
	   )
   #+END_SRC

   org-agenda-columns-add-appointments-to-effort-sum adds appointment times to
   effort sums for the day.
* Move
** Capture
   See [[info:org#Capture%20templates][Capture templates]] for more information.
   #+begin_src emacs-lisp
     (require 'org-capture)
   #+end_src

   These are settings for capturing/refiling information.
   #+BEGIN_SRC emacs-lisp
     ;; (setq org-directory "~/.emacs.d/org")	;; Setup in "personal.org"
     (setq org-default-notes-file (expand-file-name "refile.org" org-directory))
   #+END_SRC

   Capture templates.
   - t :: Captures a basic todo entry.
   - n :: Captures a task to be completed today
   - m :: Captures a meeting entry
   #+BEGIN_SRC emacs-lisp
     (setq org-capture-templates
	   (append
	    '(("t" "Todo" entry (file+headline org-default-notes-file "Capture")
	       "* TODO %? :NEW:\n%i\n" :clock-in t :clock-resume t :empty-lines 1)
	      ("n" "Next Task" entry (file+headline org-default-notes-file "Capture")
	       "* NEXT %? \nDEADLINE: %t")
	      ("m" "Meeting" entry (file+headline org-default-notes-file "Meetings")
	       "* MEETING with %? :MEETING:\n\t%t" :clock-in t :clock-resume t :empty-lines 1)
	      )
	   org-capture-templates))
   #+END_SRC

** Refile
*** Targets
   Refiling list.
   #+BEGIN_SRC emacs-lisp
     ;; Function to return org-buffer-files
     (defun ixp/org-buffer-files ()
       "Return list of opened orgmode buffer files"
       ;; org-refile functions must remove nil values
       (delete nil
	       (mapcar (function buffer-file-name)
		       (org-buffer-list 'files))))
   #+end_src
   #+begin_src emacs-lisp
     ;; Refiling targets
     (setq org-refile-targets
	   '((nil :maxlevel . 9 ) ;; This file
	     ;; (org-agenda-files :maxlevel . 2) ;; Any agenda file
	     (ixp/org-buffer-files :maxlevel . 2))) ;; Any open org-buffer
   #+end_src
*** Options
https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html
   #+begin_src emacs-lisp
     ;; Refiling options
     (setq org-outline-path-complete-in-steps nil) ;; Useful for autocompletion
     (setq org-refile-use-outline-path 'file)      ;; Use filenames when refiling
     (setq org-refile-allow-creating-parent-nodes 'confirm) ;; Allow creation of new parents
   #+END_SRC

   Specification is any of:
   +  "FILE"
   +  a cons cell (:tag . "TAG")
   +  a cons cell (:todo . "KEYWORD")
   +  a cons cell (:regexp . "REGEXP") ;; regexp to match headlines
   +  a cons cell (:level . N) Any headline of level N is considered a target.
   +  a cons cell (:maxlevel . N) Any headline with level <= N is a target.
   +  (nil . (:level . 1)) Match all top-level headlines in the current buffer.
   +  ("FILE" . (:level. 1)) Match all top-level headlines in FILE.

   The union of these sets is presented (with completion) to the user by
   org-refile. =C-cw= .
   You can set the variable =org-refile-target-verify-function= to a function to
   verify each headline found by the criteria above.

*** Advice org-before-refile-hook
Advice lisp function to add =org-before-refile-hook= to =org-refile=.
See [[info:elisp#Advising Functions][info:elisp#Advising Functions]] and [[info:elisp#Advising Named Functions][info:elisp#Advising Named Functions]].
#+begin_src emacs-lisp
(define-advice org-refile (:before (orig-fn &rest args))
   "Add `org-before-refile-hook' to `org-refile'."
    (run-hooks 'org-before-refile-insert-hook))
#+end_src

Create a hook variable to execute before =org-refile=
#+begin_src emacs-lisp
(defvar org-before-refile-insert-hook nil
  "Hook run before `org-refile' has started to execute.")
#+end_src

*** Function org-refile-to-previous-parent
The refile location, *RFLOC* should be of the form ='(nil filename nil position)=
#+begin_src emacs-lisp
  (require 'org-id)
  (defun org-id-refile-to-prev ()
    "Uses `org-id-find' to find the parent of entry-at-point,
     then refiles the entry back to it's parent."
    (interactive)
    (let* ((PPID (org-entry-get nil "PPID")) ;; Get property value at point
	   (loc (if (string-empty-p PPID)
		    (progn (message "PPID is empty!") nil)
		  (org-id-find PPID)          ;; Find location of org-id
		)))
      (when loc
	(org-refile nil nil
		    (list nil (car loc) nil (cdr loc))  ;; RFLOC
		    ))))
#+end_src

*** Hooks
Define function to log current outline location.
#+begin_src emacs-lisp
  (defun org-log-current-outline-path ()
    "Sets last-refile property to X"
    (let
	((current-path (org-display-outline-path t t nil t))
	 )
      ;; (org-set-property "refiled-from" current-path)
      (org-add-log-setup 'refile nil nil 'time current-path) ;; This does not work as intended
      ))
#+end_src

Define function to set the previous parent property value, PPID for short.
#+begin_src emacs-lisp
  (defun org-set-ppid-to-current ()
    "Sets :PPID: to the current parent's `org-id'"
    (let (ppid (org-id-get))
      (when ppid
	(org-entry-put                   ;; Set property value
	 nil
	 "PPID"		             ;; PROPERTY
	 (save-excursion	             ;; VALUE
	   (ignore-errors           ;; Catch error whilst..
	     (outline-up-heading 1 t)  ;; ... Going up a headline
	     (org-id-get))                ;; Obtain org-id
	   )))))
#+end_src

Set hook to call =my/post-refile-function=.
#+begin_src emacs-lisp
  (setq org-before-refile-insert-hook nil) ;; Clear hook
  ;; (add-hook 'org-before-refile-insert-hook 'org-log-current-outline-path) ;; Log outline path
  (add-hook 'org-before-refile-insert-hook 'org-set-ppid-to-current)      ;; Set current parent's id
#+end_src


** Archive
   #+begin_src emacs-lisp
     (require 'org-archive)
   #+end_src

   =C-cxs=
   Add this to your file, to adjust =org-archive-location= for a particular file.
   #+BEGIN_EXAMPLE
   #+ARCHIVE: %s_done::
   #+END_EXAMPLE

   The default location is set below.
   This archives items under the heading called =* Archive= in the same file.

   #+BEGIN_SRC emacs-lisp
     (setq org-archive-location "trash.org::datetree/* %s" )
   #+END_SRC

   *Note*
   + =%s= represents the current filename.
   + =::= is a seperator between files and headers.
   + =file::= use this format for archiving to a specific file.
   + =::header= use this format to archive to a specific header.
   + =::***header= use asterisks to denote the sub-level of the header.
   + =::datetree/= use =datetree/= to file under a date-tree.

   Do not mark archived tasks as done.
   #+BEGIN_SRC emacs-lisp
     (setq org-archive-mark-done nil)
   #+END_SRC
** Links
   Capture links as an =org-id=; and create ids as required.  
#+begin_src emacs-lisp
  (setq org-id-link-to-org-use-id t) 
#+end_src
* Source
** Languages
   Allow =babel= to evaluate
   - C / C++,
   - Emacs lisp,
   - Ruby,
   - dot, or
   - Gnuplot code.
   - R

   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((C . t)  ;; This includes support for C++
	(emacs-lisp . t)
	(ruby . t)
	(dot . t)
	(gnuplot . t)
	(plantuml . t)
	(R . t)
	))

   #+END_SRC

   Don't ask before evaluating code blocks.
   #+BEGIN_SRC emacs-lisp
     (setq org-confirm-babel-evaluate nil)
   #+END_SRC

** Dot
   Associate the "dot" language with the =graphviz-dot= major mode.
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
   #+END_SRC
* Display
** Show inline images
Show inline images when loading a new Org file.

This can also be configured on a per-file basis by adding one of
the following lines anywhere in the buffer:
=#+STARTUP: inlineimages=
=#+STARTUP: noinlineimages=

#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)
#+end_src

** Faces
   FACES are custom settings for font, colour, background etc.
   If you would like to modify a face that has already been loaded, you will have
   to use the following function.

   #+BEGIN_EXAMPLE emacs-lisp
	   ;; (face-spec-set 'study
	   ;; 							 '((t (:background "black"
	   ;; 										 :foreground "cyan"
	   ;; 										 :weight extra-bold)))
	   ;; 							 'face-defface-spec)
   #+END_EXAMPLE
   See [[help:face-spec-set][here]].

*** Definitions
**** Default
     #+begin_src emacs-lisp
       (face-spec-set 'org-block
		      '((
			 ((class color)(min-colors 8))
			 :background "gray5"
			 :foreground "DarkGoldenrod3"
			 ))
		      'face-override-spec
		      )
     #+end_src
**** Custom
     Define default color face.
     #+begin_src emacs-lisp
       (defface org-keyword
	 '((
	    t
	    :weight extra-bold
	    :box (
		  :style released-button )
	    :inherit (org-todo org-tag org-level-3)
	    ))
	 "Org base face for todo keywords and tags"
	 :group 'org-faces
	 )
     #+end_src

     #+BEGIN_SRC emacs-lisp
       (defface org-black
	 '((
	    default
	    :inherit (org-keyword))
	   (
	    ((class color) (min-colors 8))
	    :background "black"
	    :foreground "white"
	    ))
	 "Org color"
	 :group 'org-faces
	 )
     #+END_SRC
     #+BEGIN_SRC emacs-lisp
       (defface org-red
	 '((
	    default
	    :inherit (org-keyword))
	   (
	    ((class color) (min-colors 8))
	    :background "dark red"
	    :foreground "cornsilk"
	    ))
	 "Org color"
	 :group 'org-faces
	 )
     #+END_SRC
     #+BEGIN_SRC emacs-lisp
       (defface org-orange
	 '((
	    default
	    :inherit (org-keyword))
	   (
	    ((class color) (min-colors 8))
	    :background "tan4"
	    :foreground "wheat"
	    ))
	 "Org color"
	 :group 'org-faces
	 )
     #+END_SRC
     #+BEGIN_SRC emacs-lisp
       (defface org-yellow
	 '((
	    default
	    :inherit (org-keyword))
	   (
	    ((class color) (min-colors 8))
	    :background "dark olive green"
	    :foreground "yellow"
	    ))
	 "Org color"
	 :group 'org-faces
	 )
     #+END_SRC
     #+BEGIN_SRC emacs-lisp
       (defface org-green
	 '((
	    default
	    :inherit (org-keyword))
	   (
	    ((class color) (min-colors 8))
	    :background "dark green"
	    :foreground "khaki"
	    ))
	 "Org color"
	 :group 'org-faces
	 )
     #+END_SRC
     #+BEGIN_SRC emacs-lisp
       (defface org-cyan
	 '((
	    default
	    :inherit (org-keyword))
	   (
	    ((class color) (min-colors 8))
	    :background "dark cyan"
	    :foreground "green yellow"
	    ))
	 "Org color"
	 :group 'org-faces
	 )
     #+END_SRC
     #+BEGIN_SRC emacs-lisp
       (defface org-blue
	 '((
	    default
	    :inherit (org-keyword))
	   (
	    ((class color) (min-colors 8))
	    :background "navy"
	    :foreground "turquoise"
	    ))
	 "Org color"
	 :group 'org-faces
	 )
     #+END_SRC
     #+BEGIN_SRC emacs-lisp
       (defface org-magenta
	 '((
	    default
	    :inherit (org-keyword))
	   (
	    ((class color) (min-colors 8))
	    :background "dark magenta"
	    :foreground "cyan"
	    ))
	 "Org color"
	 :group 'org-faces
	 )
     #+END_SRC

*** Keywords
    #+BEGIN_SRC emacs-lisp
      (setq org-todo-keyword-faces
	    '(("TODO" .      org-yellow)
	      ("NEXT" .      org-orange)
	      ("STARTED" .   org-red )
	      ("WAITING" .   org-cyan)
	      ("DONE" .      org-green)
	      ))
    #+END_SRC
*** Tags
    #+BEGIN_EXAMPLE emacs-lisp
      (setq org-tag-faces
	    '(("PROJECT" . org-black)
	      ("REFILE" . org-black)
	      ("DOC" . org-black)
	      ("ACTION" . org-red)
	      ("NOARCHIVE" . org-red)
	      ("FLAGGED" . org-orange)
	      ("VERIFY" . org-yellow)
	      ("DELEGATE" . org-green)
	      ("WAITING" . org-cyan)
	      ("EXPAND" . org-blue)
	      ("NEW" . org-magenta)
	      ))
    #+END_EXAMPLE
** Misc
   I like seeing a little downward-pointing arrow instead of the usual ellipsis
   (=...=) that org displays when there's stuff under a header.

   #+BEGIN_SRC emacs-lisp
     (setq org-ellipsis "⤵")
   #+END_SRC

   Use syntax highlighting in source blocks while editing.

   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
   #+END_SRC

   Make TAB act as if it were issued in a buffer of the language's major mode.

   #+BEGIN_SRC emacs-lisp
     (setq org-src-tab-acts-natively t)
   #+END_SRC

   When editing a code snippet, use the current window rather than popping open a
   new one (which shows the same information).

   #+BEGIN_SRC emacs-lisp
     (setq org-src-window-setup 'current-window)
   #+END_SRC

   Enable spell-checking in Org-mode.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'flyspell-mode)
   #+END_SRC

   Re-display inline images if they are generated as a results portion of babel
   code. You will need to set =#+STARTUP: inlineimages= in order to display in-line
   images. The code below will update them when you evaluate a babel source code block.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-babel-after-execute-hook
	       (lambda ()
		 (when org-inline-image-overlays
		   (org-redisplay-inline-images))))
   #+END_SRC

   Startup with all headlines showing. =content=
   #+BEGIN_SRC emacs-lisp
     (setq org-startup-folded 'content)
   #+END_SRC

** Render checkbox in html
   Checklists did not render as I would like them, I think this makes
   them far more prettier in html.
   #+BEGIN_SRC emacs-lisp
     (require 'ox-html)
     (setq org-html-checkbox-type 'html)
   #+END_SRC
* Export

** Smart quotes
   Translate regular ol' straight quotes to typographically-correct curly quotes
   when exporting.

   #+BEGIN_SRC emacs-lisp
     (require 'ox)
     (setq org-export-with-smart-quotes t)
   #+END_SRC

** Images
   Set image sizes to their natural size.
   #+BEGIN_SRC emacs-lisp
     (require 'ox-latex)
     (setq org-latex-image-default-width "")
   #+END_SRC

   Set org-mode images to whatever size you like.
   E.g. Using =#+ATTR_ORG: :width 100=.
   Be aware you will require imagemagick6 support for this.
   (Imagemagick7 has made some changes which are currently incompatible [2018-05-17]).
   #+BEGIN_SRC emacs-lisp
     (setq org-image-actual-width nil)
   #+END_SRC

** HTML

   Don't include a footer with my contact and publishing information at the bottom
   of every exported HTML document.

   #+BEGIN_SRC emacs-lisp
     (setq org-html-postamble nil)
   #+END_SRC
** Icalendar
   #+begin_src emacs-lisp
     (require 'ox-icalendar)
     (require 'icalendar)
     (setq org-icalendar-use-scheduled '(event-if-todo)
	   org-icalendar-use-deadline  '(event-if-todo todo-due)
	   org-icalendar-alarm-time 40
	   icalendar-export-sexp-enumerate-all t
	   )
   #+end_src
