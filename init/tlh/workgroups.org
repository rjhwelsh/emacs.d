* Workgroups
Workgroups provides defined layouts and window management for Emacs.
( https://github.com/tlh/workgroups.el )
 #+BEGIN_SRC emacs-lisp
   (use-package "workgroups"      
     :ensure t

     :hook
     ( ;; Save workgroups when desktop is saved 
      (kill-emacs . wg-update-and-save-all))

     :init
     (require 'workgroups)

     ;; Session identification
     (rjh/use "rjh/session:init")

     ;; Default file to save/load workgroups from  
     (setq workgroups-file (concat "~/.emacs.d/workgroups_" session-id))

     ;; Enable workgroups
     (workgroups-mode 1)

     ;; No morphing
     (setq wg-morph-on nil)

     ;; Do not query to save
     (setq 
      wg-query-for-save-on-emacs-exit nil
      wg-query-for-save-on-workgroups-mode-exit nil
      )

     ;; Use default prefix
     ;; (setq wg-prefix-key (kbd "C-c C-z"))

     ;; Function to update and save everything 
     (defun wg-update-and-save-all ()
       (progn 
	 (wg-update-all-workgroups)
	 (wg-save workgroups-file)))

     ;; Load workgroups if they exist
     (if (file-exists-p workgroups-file)
	 (progn
	 (wg-load workgroups-file)
	 ;; Switch to default workgroup ;; (should be 0)
	 ;; (wg-switch-to-workgroup (wg-get-workgroup 'name "default" t) t)
	 ;; (wg-switch-to-index 0)
         ;; Errors out if already switched to a particular workgroup
         ;; Seems to switch back after frame-restore, desktop.el adjustments
	 )
       (progn
	 ;; ensure at least one workgroup exists
	 (wg-create-workgroup "default")

	 ))

     :diminish workgroups-mode
)
 #+END_SRC


Keybindings:
Use the following with <prefix> ;
	 + C-c C-z :: <prefix>
	 + c :: wg-create-workgroup
	 + A :: wg-rename-workgroup
	 + v :: wg-switch-to-workgroup
	 + n/p :: next/prev workgroup
	 + 0-9 :: switch thru positions in list
	 + w :: wg-toggle-morph (animation)
	 + C-s/l :: save / load workgroup
	 + k :: kill workgroup
	 + ,/. :: move left/right in group listing
	 + ? :: wg-help
	   
