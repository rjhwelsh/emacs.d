##+TITLE: Elgantt
#+AUTHOR: Roger J. H. Welsh
#+EMAIL: rjhwelsh@posteo.net

* Elgantt
https://github.com/legalnonsense/elgantt/ 

El Gantt creates a Gantt calendar from your orgmode files. It provides
a flexible customization system with the goal of being adaptable to
?multiple purposes. You can move dates, scroll forward and backward,
jump to the underlying org file, and customize the display.

** Dependencies
Install the dependencies:
 - org-ql
 - ts.el
 - s.el
 - dash.el

Alphapapa/
#+begin_src emacs-lisp
  (rjh/use "quelpa/quelpa:init")
  (use-package org-ql 
    :ensure t
    :quelpa (org-ql :fetcher github :repo "alphapapa/org-ql"))
#+end_src

#+begin_src emacs-lisp
 (use-package ts :ensure t)
#+end_src

Magnars/
#+begin_src emacs-lisp
 (use-package s :ensure t)
#+end_src

#+begin_src emacs-lisp
 (use-package dash :ensure t)
#+end_src

** Install
   #+begin_src emacs-lisp
     (use-package elgantt
       :ensure t
       :quelpa (elgantt :fetcher github :repo "legalnonsense/elgantt")
       )
   #+end_src

** Example colors
https://github.com/legalnonsense/elgantt/#a-note-about-colorizing-the-outline
   #+begin_src emacs-lisp
     (setq elgantt-user-set-color-priority-counter 0)
     (elgantt-create-display-rule draw-scheduled-to-deadline
       :parser ((elgantt-color . ((when-let ((colors (org-entry-get (point) "ELGANTT-COLOR")))
				    (s-split " " colors)))))
       :args (elgantt-scheduled elgantt-color elgantt-org-id)
       :body ((when elgantt-scheduled
		(let ((point1 (point))
		      (point2 (save-excursion
				(elgantt--goto-date elgantt-scheduled)
				(point)))
		      (color1 (or (car elgantt-color)
				  "black"))
		      (color2 (or (cadr elgantt-color)
				  "red")))
		  (when (/= point1 point2)
		    (elgantt--draw-gradient 
		     color1
		     color2
		     (if (< point1 point2) point1 point2) ;; Since cells are not necessarily linked in 
		     (if (< point1 point2) point2 point1) ;; chronological order, make sure they are sorted
		     nil
		     `(priority ,(setq elgantt-user-set-color-priority-counter
				       (1- elgantt-user-set-color-priority-counter))
				;; Decrease the priority so that earlier entries take
				;; precedence over later ones (note: it doesnâ€™t matter if the number is negative)
				:elgantt-user-overlay ,elgantt-org-id)))))))

   #+end_src

   #+RESULTS:

** Display rules
Color todo keywords by their todo color. 
See [[file:init/org/org.org::*Keywords]].

   #+begin_src emacs-lisp
     (elgantt-create-display-rule match-org-todo-keyword-faces
       :args (elgantt-todo) ;; Any argument listed here is available in the body
       :body ((when (member elgantt-todo (mapcar 'car org-todo-keyword-faces))
		;; `elgantt--create-overlay' is generally the easiest way to create an overlay
		(let
		    ((face (alist-get elgantt-todo org-todo-keyword-faces nil nil 'equal)))
		  (elgantt--create-overlay (point) (1+ (point))
					   `(face 
					     (
					      :background ,(face-attribute face :background)
					      :foreground ,(face-attribute face :foreground)
					      )
					     priority 99)
					   )))))
   #+end_src

   #+RESULTS:
