#+TITLE: Sunrise/Sunset functions
#+AUTHOR: Roger J. H. Welsh
#+EMAIL: rjhwelsh@posteo.net
#+PROPERTY: header-args    :results silent

Provide sunrise/sunset functions for sexp expressions in diary and org-mode
(agenda view). This re-writes functions for =solar.el=.

These functions build on the following.
#+begin_src emacs-lisp
  (require 'solar)
  (require 'org)
  (require 'org-agenda)
  (require 'org-habit)
  (require 'ox-icalendar)
  (require 'icalendar)
#+end_src


* Note on exporting to ics
In order to export diary sexps to ics. 
Currently, you need to allow export of *all* timestamps.
#+begin_example emacs-lisp
(setq org-icalendar-with-timestamps t)
#+end_example

* Dummy variables
Prevent warnings in the byte compiler
#+begin_src emacs-lisp
(defvar date)
#+end_src

* Daylight
** current-hour
   Function to return the current hour
   #+begin_src emacs-lisp
     (defun current-hour (&optional time zone)
       "Return the current hour, as a float relative to time and zone"
       (require 'cal-dst) ;; ;TODO: Add dst zone relative to current time / date
       (let* ((time (or time (current-time)))
	      (zone (or zone (current-time-zone)))
	      (dtime (decode-time time (cadr zone)))
	      (sec (car dtime))
	      (min (cadr dtime))
	      (hour (caddr dtime)))
	 (cons
	  (+ (/ (float sec) 3600)
	     (/ (float min) 60)
	     (float hour))
	  (cdr zone))))
   #+end_src
** calendar-offset-date
   #+begin_src emacs-lisp
     (defun calendar-offset-date (date &optional offset)
       "Offset the gregorian date by OFFSET number of days"
       (let ((offset (or offset 0)))
	 (calendar-gregorian-from-absolute
	  (+ offset (calendar-absolute-from-gregorian date))
	  )))
   #+end_src

** solar-remaining-daylight
   #+begin_src emacs-lisp
     (defun solar-remaining-daylight (date &optional nolocation)
       "Calculate the amount of daylight hours remaining"
       (let* ((l (solar-sunrise-sunset date))
	      (c (current-hour))
	      (ss (cadr l))
	      (sr (car l))
	      (current (car c))
	      (sunset (car ss))
	      (sunrise (car sr))
	      (timezones (list (cadr c) (cadr ss))))
	 ;; (if (not (apply 'equal timezones)) (error "Timezones are not compatible! %s" timezones))
	 (if (equal date (calendar-current-date))
	     (if (and (<= current sunset) (>= current sunrise))
		 (- sunset current))
	   (if (> (calendar-absolute-from-gregorian date)
		  (calendar-absolute-from-gregorian (calendar-current-date)))
	       (- sunset sunrise)
	     ))))
   #+end_src

** solar-remaining-night
   #+begin_src emacs-lisp
     (defun solar-remaining-night (date &optional nolocation)
       "Calculate the amount of hours remaining until next sunrise"
       (let* ((l (solar-sunrise-sunset date))
	      (l2 (solar-sunrise-sunset (calendar-offset-date date 1)))
	      (c (current-hour))
	      (ss (cadr l))
	      (current (car c))
	      (sunset (car ss))

	      (today? (equal date (calendar-current-date)))
	      (after-today? (> (calendar-absolute-from-gregorian date)
			       (calendar-absolute-from-gregorian (calendar-current-date))))
	      (after-sunset? (> current sunset))

	      (sr (car (if (or after-sunset? after-today?) l2 l)))
	      (sunrise (+ (car sr) (if (or after-sunset? after-today?) 24.0 0)))

	      (timezones (list (cadr c) (cadr sr))))
	 ;; (if (not (apply 'equal timezones)) (error "Timezones are not compatible! %s" timezones))
	 (if today?
	     (if (and (<= current sunrise) (>= current sunset))
		 (- sunrise current))
	   (if after-today?
	       (- sunrise sunset)
	     ))))
   #+end_src

* Sunrise
  #+begin_src emacs-lisp
    (defun solar-sunrise-string (date &optional offset nolocation)
      "String of *local* time of sunrise and daylight on Gregorian DATE.
	    Optional OFFSET non-nil means offset by this number of hours (float)
					     NOLOCATION non-nil means do not print the location"
      (let* ((l (solar-sunrise-sunset date))
	     (o (or offset 0))
	     (sr (car l))
	     (sr2 (if sr (cons (+ (car sr) o) (cdr sr))))
	     (daylight (solar-remaining-daylight date)))
	(format
	 "%s %s"
	 (if sr2
	     (concat (apply 'solar-time-string sr2) " Sunrise")
	   "no sunrise")
	 (concat (if daylight (format "(%s hrs daylight)" (solar-daylight daylight)))))))

    (defun diary-sunrise (&optional offset)
      "Local time of sunrise as a diary entry.
	    Accurate to a few seconds."
      (or (and calendar-latitude calendar-longitude calendar-time-zone)
	  (solar-setup))
      (solar-sunrise-string date offset))
  #+end_src

* Sunset
  #+begin_src emacs-lisp
    (defun solar-sunset-string (date &optional offset nolocation)
      "String of *local* time of sunset and daylight on Gregorian DATE.
			    Optional OFFSET non-nil means offset by this number of hours (float)
							     NOLOCATION non-nil means do not print the location"
      (let* ((l (solar-sunrise-sunset date))
	     (o (or offset 0))
	     (ss (cadr l))
	     (ss2 (if ss (cons (+ (car ss) o) (cdr ss))))
	     (night (solar-remaining-night date)))
	(format
	 "%s %s"
	 (if ss2
	     (concat (apply 'solar-time-string ss2) " Sunset" )
	   "no sunset")
	 (concat (if night (format "(%s hrs 'til dawn)" (solar-daylight night)))))))

    (defun diary-sunset (&optional offset)
      "Local time of sunset as a diary entry.
	    Accurate to a few seconds."
      (or (and calendar-latitude calendar-longitude calendar-time-zone)
	  (solar-setup))
      (solar-sunset-string date offset))
  #+end_src

* Patch :org:org:agenda:
  Add a patch to allow times to be defined with sexp-expressions.
  Time is defined in the string portion returned by the sexp.
  The time must be at the start of the string.

** org.el
Loads patched functions from below:
   #+begin_src emacs-lisp
     (load-file "~/.emacs.d/rjh/patch/solar/org.el")
   #+end_src
*** org-time-from-sexp :NEW:
    Define function to obtain time from sexp expressions.
*** org-timestamp-from-sexp :NEW:
    Calculates the next occurence of sexp, or nil if it is beyond
    org-sexp-max-future-days.
    Compare use of function to [[help:icalendar--convert-sexp-to-ical][icalendar--convert-sexp-to-ical]]

*** org-time-string-to-absolute :DOC:
    This function is used to obtain the date from sexps in org-agenda.el
    Also known as _org-agenda--timestamp-to-absolute_ in org-agenda.el
    Uses variables s, current.
    Where
    - s :: timestamp/sexp (excluding <>) e.g. %%(diary-sunrise)
    - current :: (calendar-absolute-from-gregorian date)

    Match any day with a sunrise
    #+begin_example emacs-lisp
    (calendar-gregorian-from-absolute (org-time-string-to-absolute "%%(diary-sunrise)" (calendar-absolute-from-gregorian (calendar-current-date))))
    #+end_example

    Match 3rd Sunday of the month
    #+begin_example emacs-lisp
    (calendar-gregorian-from-absolute (org-time-string-to-absolute "%%(diary-float t 0 3)" (calendar-absolute-from-gregorian (calendar-current-date))))
    #+end_example

    Match any past/future 4th Sunday of the month (regular timestamp)
    #+begin_example emacs-lisp
    (calendar-gregorian-from-absolute (org-time-string-to-absolute "<2020-02-01 Sat 12:49 ++7d>" (calendar-absolute-from-gregorian (calendar-current-date)) 'past))
    (calendar-gregorian-from-absolute (org-time-string-to-absolute "<2020-02-01 Sat 12:49 ++7d>" (calendar-absolute-from-gregorian (calendar-current-date)) 'future))
    #+end_example

    Doing this with sexps, does not work for obvious reasons. (Halting problem)
*** org-sexp-enumeration-days :notimplemented:
    Variable defining the maximum number of days into the future into which
    sexps should be calculated
    This variable already exists in [[help:icalendar-export-sexp-enumeration-days][icalendar-export-sexp-enumeration-days]]

** org-agenda.el patches
   Patch org-agenda.el to allow sexp to calculate times.

   #+begin_src emacs-lisp
     (load-file "~/.emacs.d/rjh/patch/solar/org-agenda.el")
   #+end_src

*** org-agenda-get-scheduled
**** Patch
     #+begin_example emacs-lisp
                (level (make-string (org-reduced-level (org-outline-level))
                          ?\s))
                (head (buffer-substring (point) (line-end-position)))
     +           (sexp-time
     +           (if sexp?
     +             (org-time-from-sexp
     +              (replace-regexp-in-string "^%%" "" s)
     +              (calendar-gregorian-from-absolute current))))
                (time
                (cond
                 ;; No time of day designation if it is only a
                 ;; reminder, except for habits, which always show
                 ;; the time of day.  Habits are an exception
                 ;; because if there is a time of day, that is
                 ;; interpreted to mean they should usually happen
                 ;; then, even if doing the habit was missed.
                 ((and
                  (not habitp)
                  (/= current schedule)
                  (/= current repeat))
                 nil)
                 ((string-match " \\([012]?[0-9]:[0-9][0-9]\\)" s)
                 (concat (substring s (match-beginning 1)) " "))
     +            (sexp-time
     +            (concat sexp-time " "))
                 (t 'time)))
     #+end_example

*** org-agenda-get-timestamps
**** Patch
     #+begin_example emacs-lisp
            (let* ((pos (match-beginning 0))
                (repeat (match-string 1))
                (sexp-entry (match-string 3))
     +           (sexp-time (if sexp-entry
     +                   (org-time-from-sexp sexp-entry
     +                            (calendar-gregorian-from-absolute current))))
     -           (time-stamp (if (or repeat sexp-entry) (match-string 0)
     +           (time-stamp (if (or repeat sexp-entry)
     +                    (or (and sexp-time (concat sexp-time " "))
     +                     (match-string 0))
                       (save-excursion
                        (goto-char pos)
                        (looking-at org-ts-regexp-both)
                        (match-string 0))))
     #+end_example

** ox-icalendar.el patches
   *Warning! sexps must be in the headline in order to be interpreted. (For the moment)*
   
   Patch ox-icalendar.el to export 'diary-sexp to ics.
   #+begin_src emacs-lisp
     (load-file "~/.emacs.d/rjh/patch/solar/ox-icalendar.el")
   #+end_src

*** org-icalendar-entry
Interprets headline entry for ics. 
**** Patch
     #+begin_example emacs-lisp
                     (org-element-map
                       (cons (org-element-property :title entry)
                          (org-element-contents inside))
     -                  'diary-sexp
     -                 (lambda (sexp)
     -                  (org-icalendar-transcode-diary-sexp
     -                   (org-element-property :value sexp)
     -                   (format "DS%d-%s" (cl-incf counter) uid)
     -                   summary))
     +                  'timestamp
     +                 (lambda (ts)
     +                  (when (let ((type (org-element-property :type ts)))
     +                      (cl-case (plist-get info :with-timestamps)
     +                       (active (memq type '(diary)))
     +                       (inactive (memq type '(diary)))
     +                       ((t) t)))
     +                   (let ((uid (format "%d-%s" (cl-incf counter) uid)))
     +                    ;; (org-icalendar--vevent
     +                    ;; entry ts uid summary loc desc cat tz class)
     +                    (message (format "%s" (org-element-property :raw-value ts)))
     +                    (org-icalendar--vevent
     +                     entry ts uid summary loc desc cat tz class)
     +                    )))
                      info nil (and (eq type 'headline) 'inlinetask))
                     "")))))
            ;; If ENTRY is a headline, call current function on every
     #+end_example
*** org-icalendar--vevent
A template for vevents.
**** Patch
     #+begin_example emacs-lisp
         Return VEVENT component as a string."
     -      (org-icalendar-fold-string
          (if (eq (org-element-property :type timestamp) 'diary)
     -       (org-icalendar-transcode-diary-sexp
     -        (org-element-property :raw-value timestamp) uid summary)
     +       (let ((counter 0))
     +        (apply 'concat
     +           (mapcar (lambda (ts)
     +                (let ((uid (format "DS%d-%s" (cl-incf counter) uid)))
     +                 (org-icalendar--vevent entry ts uid summary location description categories timezone class)
     +                 ))
     +               (org-timestamp-from-sexp
     +                (substring (org-element-property :raw-value timestamp) 3 -1))
     +               )))
     +      (org-icalendar-fold-string
           (concat "BEGIN:VEVENT\n"
               (org-icalendar-dtstamp) "\n"
               "UID:" uid "\n"
     #+end_example
** icalendar.el patches
   
   #+begin_src emacs-lisp
     (load-file "~/.emacs.d/rjh/patch/solar/icalendar.el")
   #+end_src
*** icalendar-export-region
**** Patch
     #+begin_example emacs-lisp
     (cdr contents-n-summary))))
    (setq result (concat result header contents alarm
    "\nEND:VEVENT")))
-                    (if (consp cns-cons-or-list)
-                        (list cns-cons-or-list)
-                      cns-cons-or-list)))
+                    (if (consp (car cns-cons-or-list))
+            cns-cons-or-list
+           (list cns-cons-or-list))))
;; handle errors
(error
(setq found-error t)
     #+end_example
