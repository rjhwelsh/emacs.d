* Rtags :C:Cpp:Clang:
This configuration is taken from [[http://martinsosic.com/development/emacs/2017/12/09/emacs-cpp-ide.html][Martin Sosic]].
https://github.com/Andersbakken/rtags

A client/server indexer for c/c++/objc[++] with integration for Emacs based on clang. 

#+BEGIN_SRC emacs-lisp
  (use-package rtags :defer t
    :ensure t
    :config
    (progn
      (setq rtags-path "~/.emacs.d/rtags/build/bin")
      (unless (rtags-executable-find "rc") (error "Binary rc is not installed!"))
      (unless (rtags-executable-find "rdm") (error "Binary rdm is not installed!"))

      (define-key c-mode-base-map (kbd "M-.") 'rtags-find-symbol-at-point)
      (define-key c-mode-base-map (kbd "M-,") 'rtags-find-references-at-point)
      (define-key c-mode-base-map (kbd "M-?") 'rtags-display-summary)
      (rtags-enable-standard-keybindings)

      ;; (setq rtags-use-helm t)

      ;; Shutdown rdm when leaving emacs.
      (add-hook 'kill-emacs-hook 'rtags-quit-rdm)
      (add-hook 'c-mode-hook 'rtags-start-process-unless-running)
      (add-hook 'c++-mode-hook 'rtags-start-process-unless-running)
      (add-hook 'objc-mode-hook 'rtags-start-process-unless-running)

      ;; Completion frameworks
      ;; TODO: Has no coloring! How can I get coloring?
      (use-package helm-rtags
	:requires helm rtags
	:ensure t
	:config
	(progn
	  (setq rtags-display-result-backend 'helm)))

      ;; Use rtags for auto-completion.
      (use-package company-rtags
	:requires company rtags
	:ensure t
	:config
	(progn
	  (setq rtags-autostart-diagnostics t)
	  (rtags-diagnostics)
	  (setq rtags-completions-enabled t)
	  (push 'company-rtags company-backends)
	  ))

      ;; Live code checking.
      (use-package flycheck-rtags
	:requires flycheck rtags
	:ensure t
	:config
	(progn
	  ;; ensure that we use only rtags checking
	  ;; https://github.com/Andersbakken/rtags#optional-1
	  (defun setup-flycheck-rtags ()
	    (flycheck-select-checker 'rtags)
	    (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
	    (setq-local flycheck-check-syntax-automatically nil)
	    (rtags-set-periodic-reparse-timeout 2.0)  ;; Run flycheck 2 seconds after being idle.
	    )
	  (add-hook 'c-mode-hook #'setup-flycheck-rtags)
	  (add-hook 'c++-mode-hook #'setup-flycheck-rtags)))
      ))
#+END_SRC
** About
  http://www.rtags.net
  Brief note.
  Irony is faster, and rtags is more feature-complete.

  RTags is a client/server application that indexes C/C++ code and keeps a
  persistent file-based database of references, declarations, definitions,
  symbolnames etc.
** Dependencies
 See https://github.com/Andersbakken/rtags#tldr-quickstart for details.
*** The rtags binaries
  Build the rtags binaries. The following configuration for =Rtags= will make
  them available to emacs.
  #+BEGIN_EXAMPLE bash
  git clone --recursive https://github.com/Andersbakken/rtags.git ~/.emacs.d/rtags
  cd ~/.emacs.d/rtags
  mkdir -vp build
  cd build
  cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ..
  make
  #+END_EXAMPLE
** Rtags project setup
 For more details, please see [[https://github.com/Andersbakken/rtags#setup][here]].

 Basically a =compile_commands.json= is required for rtags to work with your
 project. Clang requires information about how your sources are compiled in order
 to properly index them.

 #+BEGIN_EXAMPLE
 rc -c gcc -I... -fsomeflag -c foobar.c
 rc -J /path/to/a/directory/containing/compile_commands.json
 #+END_EXAMPLE

 You can generate a compile_commands.json with various different tools, one might
 fit better than the other, depending on your project build system. See below for
 examples.

*** ninja
 #+BEGIN_EXAMPLE
 ninja -t compdb cxx cc > compile_commands.json
 rc -J
 #+END_EXAMPLE
*** cmake
 #+BEGIN_EXAMPLE
 cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .
 rc -J
 #+END_EXAMPLE
*** bear
 For other projects, see [[https://github.com/rizsotto/Bear][Bear]].
 #+BEGIN_EXAMPLE
 make clean
 bear make
 rc -J
 # Parse commands for a specific target only
 make clean
 bear make rdm
 rc -J
 #+END_EXAMPLE
*** make
 For not too complex makefiles, you can do this.
 #+BEGIN_EXAMPLE
 make clean
 make -nk | rc -c -
 #+END_EXAMPLE
*** mitm
 You can also *man-in-the-middle* your gcc, cc, c++ commands such that rc will
 make sure RTags knows about it.
 #+BEGIN_EXAMPLE
 ln -s /path/to/rtags/bin/gcc-rtags-wrapper.sh /somewhere/that/is/in/your/path/before/usr/bin/gcc
 ln -s /path/to/rtags/bin/gcc-rtags-wrapper.sh /somewhere/that/is/in/your/path/before/usr/bin/c++
 ln -s /path/to/rtags/bin/gcc-rtags-wrapper.sh /somewhere/that/is/in/your/path/before/usr/bin/cc
 ln -s /path/to/rtags/bin/gcc-rtags-wrapper.sh /somewhere/that/is/in/your/path/before/usr/bin/g++
 #+END_EXAMPLE
 RTags will group source files into projects based on some heuristics.
