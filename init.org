#+AUTHOR: Roger J. H. Welsh
#+EMAIL: rjhwelsh@gmail.com
#+PROPERTY: header-args    :results silent
#+STARTUP: content

* Init.el
 The following are commented out (example) snippets from the =init.el= file.
** Package archives
 The package library is required for package management.
 #+BEGIN_EXAMPLE emacs-lisp
	(require 'package)
 #+END_EXAMPLE

 Disable automatic package loading.
 #+BEGIN_EXAMPLE emacs-lisp
	(setq package-enable-at-startup nil)
	(package-initialize)
 #+END_EXAMPLE

 This code provides a source list of package archives, from which to install packages.
 #+BEGIN_EXAMPLE emacs-lisp
	(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
	(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
	(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
 #+END_EXAMPLE

 Refresh the last view of the elisp archives.
 #+BEGIN_EXAMPLE emacs-lisp
	(unless package-archive-contents
		(package-refresh-contents))
 (setq package-load-list '(all))
 #+END_EXAMPLE
** Org-plus-contrib
Load the latest org-plus-contrib.
This should be done before evaluating any conf.org files in this repo.
 #+begin_EXAMPLE emacs-lisp
(unless (package-installed-p 'org-plus-contrib)
  (package-install 'org-plus-contrib))
(require 'org)
 #+end_EXAMPLE
** Use-package
 Use-package is a special set of macros to automatically install and
 load packages from the init.el file, this needs to be
 "bootstrapped" before we can use it.
 #+BEGIN_EXAMPLE emacs-lisp
 (unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))
 (eval-when-compile
   (require 'use-package))
(use-package "diminish"
	:ensure t
	:init
	(require 'diminish)
	)
 (require 'bind-key)
 #+END_EXAMPLE

** Follow symlinks
 This ensures emacs always follows symlinks to the version-controlled source.
 #+BEGIN_EXAMPLE emacs-lisp
 (setq vc-follow-symlinks t)
 #+END_EXAMPLE

** Auto-compile
 Always compile packages and use the newest available.
 #+BEGIN_EXAMPLE emacs-lisp
 (use-package auto-compile
   :config (auto-compile-on-load-mode)
   :ensure t)
 (setq load-prefer-newer t)
 #+END_EXAMPLE

** Configuration

*** Quick Setup
After setting up, use environment variables to specify which files relative to the
repo's =init/= directory you would like to load.
For example; to load Emacs with the =init/org.org= configuration. (Exclude the
file extension)
#+begin_example sh
 EMACS_CONFIG="org" /usr/bin/emacs
#+end_example

*** Repository location
Variable containing the path of this cloned repository.
#+begin_src emacs-lisp
		 ;; Set rjh config repo location
		 (setq rjh/local-config-repo "~/.emacs.d/rjh/")
#+end_src
*** Environment variables
Environmental variables to use for configuration loading specification.
(White-space separated list of config.org files to load; with the =.org= suffix removed.)
#+begin_src emacs-lisp
		 ;; Set environment variable to parse for configuration files
		 (setq rjh/config-env "EMACS_CONFIG")
		 (setq rjh/config-private-env "EMACS_CONFIG_PRIVATE")
#+end_src
*** Directories

Location of the directories containing configuration files.
  - rjh/local-init-dir :: Location of repo init org files
	- rjh/local-private-dir :: Location of repo private org files

Use the private directory for storing configuration of sensitive configuration,
like identity information. Or alternatively to override the regular
configuration. *Please do NOT store passwords in here*
The idea is to keep sensitive information separate, so that rest of your
configuration can be shared with others.

#+begin_src emacs-lisp
		 ;; Location of private configuration files
		 (setq rjh/local-private-dir "~/.emacs.d/private")

		 ;; Load config methods
		 (setq rjh/local-init-dir
					 (expand-file-name
						"init"
						rjh/local-config-repo ))
#+end_src
*** Loading functions
These functions load org files for the init and private directories
respectively.

#+begin_src emacs-lisp
		 ;; Functions to load config
		 (defun rjh/load-init (orgfile)
			 "Use org-babel-load-file to load init/orgfile in rjh/local-config-repo"
			 (org-babel-load-file
				(expand-file-name (concat orgfile ".org") rjh/local-init-dir)
				t
				)
			 )

		 (defun rjh/load-private (orgfile)
			 "Use org-babel-load-file to load private/orgfile"
			 (org-babel-load-file
				(expand-file-name (concat orgfile ".org") rjh/local-private-dir)
				)
			 )
#+end_src
This function reads the environment variables and loads the configuration for
each white-space separated item.
#+begin_src emacs-lisp
	(defun rjh/load-env ()
		"Loads configuration from environment variable, rjh/config-env"
		(let ((configlist (delete "" (split-string (or (getenv rjh/config-env) ""))))
					(privatelist (delete "" (split-string (or (getenv rjh/config-private-env) ""))))
					)
			(dolist (orgfile configlist)
				(format-message "Loading %s ..." orgfile)
				(rjh/load-init orgfile)
				)

			;; Load private config (for each init) ...
			(dolist (orgfile configlist)
				(format-message "Loading %s ..." orgfile)
				(if (file-readable-p orgfile)
						(rjh/load-private orgfile)
					))

			(dolist (orgfile privatelist)
				(format-message "Loading %s ..." orgfile)
				(rjh/load-private orgfile)
				)
			))

	(rjh/load-env)
	 #+end_src
