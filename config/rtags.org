#+TITLE: Rtags mode
#+AUTHOR: Roger J. H. Welsh
#+EMAIL: rjhwelsh@gmail.com

* About
 http://www.rtags.net
 Brief note.
 Irony is faster, and rtags is more feature-complete.

 RTags is a client/server application that indexes C/C++ code and keeps a
 persistent file-based database of references, declarations, definitions,
 symbolnames etc.
* Dependencies
See https://github.com/Andersbakken/rtags#tldr-quickstart for details.
** The rtags binaries
 Build the rtags binaries. The following configuration for =Rtags= will make
 them available to emacs.
 #+BEGIN_EXAMPLE bash
 git clone --recursive https://github.com/Andersbakken/rtags.git ~/.emacs.d/rtags
 cd ~/.emacs.d/rtags
 mkdir -vp build
 cd build
 cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ..
 make
 #+END_EXAMPLE

* Rtags project setup
For more details, please see [[https://github.com/Andersbakken/rtags#setup][here]].

Basically a =compile_commands.json= is required for rtags to work with your
project. Clang requires information about how your sources are compiled in order
to properly index them.

#+BEGIN_EXAMPLE
rc -c gcc -I... -fsomeflag -c foobar.c
rc -J /path/to/a/directory/containing/compile_commands.json
#+END_EXAMPLE

You can generate a compile_commands.json with various different tools, one might
fit better than the other, depending on your project build system. See below for
examples.

** ninja
#+BEGIN_EXAMPLE
ninja -t compdb cxx cc > compile_commands.json
rc -J
#+END_EXAMPLE
** cmake
#+BEGIN_EXAMPLE
cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .
rc -J
#+END_EXAMPLE
** bear
For other projects, see [[https://github.com/rizsotto/Bear][Bear]].
#+BEGIN_EXAMPLE
make clean
bear make
rc -J
# Parse commands for a specific target only
make clean
bear make rdm
rc -J
#+END_EXAMPLE
** make
For not too complex makefiles, you can do this.
#+BEGIN_EXAMPLE
make clean
make -nk | rc -c -
#+END_EXAMPLE
** mitm
You can also *man-in-the-middle* your gcc, cc, c++ commands such that rc will
make sure RTags knows about it.
#+BEGIN_EXAMPLE
ln -s /path/to/rtags/bin/gcc-rtags-wrapper.sh /somewhere/that/is/in/your/path/before/usr/bin/gcc
ln -s /path/to/rtags/bin/gcc-rtags-wrapper.sh /somewhere/that/is/in/your/path/before/usr/bin/c++
ln -s /path/to/rtags/bin/gcc-rtags-wrapper.sh /somewhere/that/is/in/your/path/before/usr/bin/cc
ln -s /path/to/rtags/bin/gcc-rtags-wrapper.sh /somewhere/that/is/in/your/path/before/usr/bin/g++
#+END_EXAMPLE
RTags will group source files into projects based on some heuristics.
