#+TITLE: Org-mode configuration
#+AUTHOR: Roger J. H. Welsh
#+EMAIL: rjhwelsh@gmail.com
#+PROPERTY: header-args    :results silent
#+STARTUP: content

* Packages
The default org should be setup to be installed via the init.el file in your
emacs.d directory. This ensures the latest org-mode is used, and not the default
provided with your emacs binaries. The following example illustrates the
Emacs-lisp commands that bootstrap org-mode, before processing the org-files as
specified by your configuration.org.

#+BEGIN_EXAMPLE
(unless (package-installed-p 'org-plus-contrib)
  (package-install 'org-plus-contrib))
(require 'org)
(org-babel-load-file "~/.emacs.d/configuration.org")
#+END_EXAMPLE

The following load-path is used for org-plus-contrib packages.
It will automatically expand to the first available org-plus-contrib
package in elpa.
#+BEGIN_SRC emacs-lisp
	(add-to-list
	 'load-path
	 (car (file-expand-wildcards "~/.emacs.d/elpa/org-plus-contrib*" ))
	 )
#+END_SRC


* Setup
For a minimal =.emacs= for =org-mode=, see [[http://orgmode.org/worg/org-faq.html#minimal-emacs][here]].
#+BEGIN_SRC emacs-lisp
(require 'org-install)
#+END_SRC
Enable extension modules for org-mode
 #+BEGIN_SRC emacs-lisp
(eval-after-load 'org
 '(org-load-modules-maybe t))
 #+END_SRC

** Application Defaults
Default application associations.
#+BEGIN_SRC emacs-lisp
	(setq org-file-apps
				'((auto-mode . emacs)
					("\\.x?html?\\'" . "firefox %s")
					("\\.pdf\\'" . "evince \"%s\"")
					("\\.pdf::\\([0-9]+\\)\\'" . "evince \"%s\" -p %1")
					))
#+END_SRC
Link frame setup. Prevent windows from splitting.
#+BEGIN_SRC emacs-lisp
	(setq org-link-frame-setup
				'((file . find-file)
					))
#+END_SRC

*Harry:* Exporting to HTML and opening the results triggers
=/usr/bin/sensible-browser=, which checks the =$BROWSER= environment variable to
choose the right browser. I'd like to always use Firefox, so:
#+BEGIN_SRC emacs-lisp
  (setenv "BROWSER" "firefox")
#+END_SRC
** Keybindings
Some handy keybindings.
#+BEGIN_SRC emacs-lisp
	(define-key global-map "\C-cl" 'org-store-link)
	(define-key global-map "\C-ca" 'org-agenda)
	(define-key global-map "\C-cc" 'org-capture)
  (define-key org-mode-map "\C-ce" 'rjh/org-tags-expire)
  (define-key org-agenda-mode-map "\C-ce" 'rjh/org-tags-expire-agenda)
#+END_SRC

* Agenda Configuration
** habits (and repeating tasks)
Habit tracking in agenda enabled in org-modules.
#+BEGIN_SRC emacs-lisp
	(add-to-list 'org-modules 'org-habit)
	(require 'org-habit)
#+END_SRC


Skip displaying scheduled tasks if deadline is visible.
#+BEGIN_SRC emacs-lisp
	(setq org-agenda-skip-scheduled-if-deadline-is-shown 'repeated-after-deadline)
#+END_SRC

Now to make a habit look closely at the following example, from
[[info:org#Tracking%20your%20habits][info:org#Tracking your habits]].
#+BEGIN_EXAMPLE
  ** TODO Shave
        SCHEDULED: <2009-10-17 Sat .+2d/4d>
        :PROPERTIES:
        :STYLE:    habit
        :LAST_REPEAT: [2009-10-19 Mon 00:36]
        :END:
        - State "DONE"       from "TODO"       [2009-10-15 Thu]
        - State "DONE"       from "TODO"       [2009-10-12 Mon]
        - State "DONE"       from "TODO"       [2009-10-10 Sat]
        - State "DONE"       from "TODO"       [2009-10-04 Sun]
        - State "DONE"       from "TODO"       [2009-10-02 Fri]
        - State "DONE"       from "TODO"       [2009-09-29 Tue]
        - State "DONE"       from "TODO"       [2009-09-25 Fri]
        - State "DONE"       from "TODO"       [2009-09-19 Sat]
        - State "DONE"       from "TODO"       [2009-09-16 Wed]
        - State "DONE"       from "TODO"       [2009-09-12 Sat]
#+END_EXAMPLE
Notice that habit requires the following:

 * open-state TODO keyword
 * :STYLE: habit in properties
 * a SCHEDULED date; usually with a .+ style repeat. (Repeats from last DONE
   state) ++ is appropriate for habits with time constraints. (Repeats next
   future date). + for unusual habit that can have a backlog. (rent payments)
   (Repeats from last START date).
 * Minimum/maximum ranges can be specified by using the syntax. `.+2d/3d', which
   says that you want to do the task at least every 3 days, but at most every 2
   days.
 * State logging for DONE must be enabled. ! etc. This enables tracking of the
   tasks to be shown in the consistency graph.

In the agenda view habits will show different colors on each day.
 - Blue :: not done yet (on day).
 - Green :: could have been done (on day).
 - Yellow :: overdue the next day.
 - Red :: overdue on that day.

Configuration variables for habits.
#+BEGIN_SRC elisp
	(setq org-habit-graph-column 60
				org-habit-preceding-days 7
				org-habit-following-days 3
				org-habit-show-habits-only-for-today t
				)
#+END_SRC
Press K to enable/disable habits in the agenda.
** 'TODO' Keywords
Workflow states have been taken from gjstein.
See his guide [[http://cachestocaches.com/2016/9/my-workflow-org-agenda/#][here]].
	 - todo :: Indicate tasks / projects which need to get done
	 - next :: Tasks which are being done "next" within a particular project
	 - waiting :: Tasks waiting on someone else.
							 Log notes on what this is waiting on.
	 - inactive :: Signify something to come back to.
	 - cancelled :: Fizzled tasks. Add :CANCELLED: tag to task.
	 - meeting :: Indicate a meeting with someone, put in meeting notes
	 - done :: Completed task

For below; make the following notes:
 + Expressions may be a "sequence" or "type" ; "type" goes straight to DONE
	 after completion. Sequences rotate through all keywords.
 + TODO = the todo keyword
 + (t) = the fast key shortcut
 + ! means LOG timestamp when changing *TO* item.
 + @ means LOG timestamp with note when changing item.
 + /! means LOG timestamp/note when changing *FROM* item also.
#+BEGIN_SRC emacs-lisp
	(setq org-todo-keywords
			'((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
				(sequence "WAITING(w@/!)" "INACTIVE(i)" "|" "CANCELLED(c@/!)" "MEETING")))
#+END_SRC
 + org-log-into-drawer LOGS everything into a hidden drawer, so everything looks cleaner.
#+BEGIN_SRC emacs-lisp
	(setq org-log-into-drawer t) ;;LOGBOOK
#+END_SRC

For group projects, put this at the top of the project line for custom keywords.
#+BEGIN_EXAMPLE
#+TYP_TODO: @ROGER(r) @NAME1(1) @NAME2(2) | DONE(d)
#+END_EXAMPLE

** Tags
Tags represent environmental conditions before a task can be undertaken.
Tasks should be organized by a hierarchy of projects and sub-projects.
Projects are prioritized, tags develop views for batch processing tasks.

IF <tag> THEN <task>
IF <condition> THEN <task>
IF <tag1> AND <tag2> AND ... THEN <task>

Tags should not be inherited by sub-tasks.
Sub-tasks should differentiate work dependencies only.

*** Default Tag list
See =org-tag-alist= for more details.
#+BEGIN_SRC emacs-lisp
	(setq org-tag-alist '())
#+END_SRC
*** Persistent Tag list
These tags will always be available unless =#+STARTUP: noptag= is set in the buffer.
#+BEGIN_SRC emacs-lisp
	(setq org-tag-persistent-alist
				'(
					("PROJECT" . ?P)
					("FLAGGED" . ?F)
					(:newline)
					("NEW" . ?N)
					("DELEGATE" . ?D)
					("WAITING" . ?W)
					("BREAKDOWN" . ?B)
					("VERIFY" . ?V)
				  ("ACTION" . ?a)
					("CANCELLED" . ?C)
					(:newline)
					))
#+END_SRC
*** Exclude tags from inheritance
Exclude all tags from inheritance, unless they start with a !.
#+BEGIN_SRC emacs-lisp
(setq org-use-tag-inheritance "^#.*")
#+END_SRC

This *example* will exclude a select list of tags from being inherited, where
inheritance is enabled.
#+BEGIN_EXAMPLE emacs-lisp
(setq org-tags-exclude-from-inheritance '("ACTION"))
#+END_EXAMPLE

This will exclude all tags from =org-tag-persistent-alist= from being inherited.
#+BEGIN_SRC emacs-lisp
(setq org-tags-exclude-from-inheritance
	(let (newlist '())
		(dolist (element org-tag-persistent-alist newlist)
			(push (car element) newlist))))
#+END_SRC

*** Functions to expire tags
Expiration tags are temporary tags for grouping TODO items in a short-term
meaningful way. These functions quickly expunge these temporary tags in bulk, to
facilitate better short-term planning and turnover.

 Expiration tags.
 #+BEGIN_SRC emacs-lisp
	 (setq rjh/org-tags-expiration-tags '("NEW" "ACTION"))
 #+END_SRC

 Generic interactive function.
   - Will expire tags for current item
	 - Will expire tags for entire buffer when called with a prefix.
 #+BEGIN_SRC emacs-lisp
	 (defun rjh/org-tags-expire (ARG)
		 "Expires all expiration tags.
	 PREFIXARG = Expire tags in buffer if non-nil"
		 (interactive "p")
		 (if (>= ARG 4)
				 (rjh/org-tags-expire-buffer)
			 (if (org-region-active-p)
					 (call-interactively 'rjh/org-tags-expire-region)
				 (rjh/org-tags-expire-entry))))
 #+END_SRC

**** org-mode
		 These provide functions for removing expiration-tags in the current
		 =org-mode= buffer.

 Tag expiration for headline.
 #+BEGIN_SRC emacs-lisp
	 (defun rjh/org-tags-expire-headline ( expiration-tags )
		 "Removes all expiration tags from headline."
		 (let ((newtagslist (org-get-local-tags)))
			 (unless (null newtagslist)
				 (dolist (element expiration-tags)
					 (when (member element newtagslist)
						 (setq newtagslist (delete element newtagslist))))
				 (org-set-tags-to newtagslist)
				 (org-reveal))))
 #+END_SRC

 Tag expiration for entry (interactive).
 #+BEGIN_SRC emacs-lisp
	 (defun rjh/org-tags-expire-entry ()
		 "Expires all expiration tags in current entry."
		 (interactive)
		 (save-excursion
					 (org-back-to-heading 't)
					 (rjh/org-tags-expire-headline rjh/org-tags-expiration-tags)))
 #+END_SRC

 Tags expiration for buffer (interactive).
 #+BEGIN_SRC emacs-lisp
	 (defun rjh/org-tags-expire-buffer ()
		 "Expires all expiration tags in current buffer.
	 Includes invisible heading lines."
		 (interactive)
		 (save-excursion
			 (goto-char (point-min))
			 (while (outline-next-heading)
				 (rjh/org-tags-expire-headline rjh/org-tags-expiration-tags))))
 #+END_SRC

Tags expiration for a region of an org buffer.
#+BEGIN_SRC emacs-lisp
	 (defun rjh/org-tags-expire-region (start end)
		 "Expires all expiration tags in current region."
    (interactive "r")
		(dolist (element rjh/org-tags-expiration-tags)
			(org-change-tag-in-region start end element 'off)))
#+END_SRC

**** org-agenda
		 These are functions to remove expiration tags in the =org-agenda=.

Tag expiration for an agenda headline.
#+BEGIN_SRC emacs-lisp
	(defun rjh/org-tags-expire-agenda-headline ( expiration-tags )
		"Removes all expiration tags from an AGENDA headline."
		(dolist (element expiration-tags)
			(org-agenda-set-tags element 'off)))
#+END_SRC

Tag expiration for an agenda buffer.
#+BEGIN_SRC emacs-lisp
	(defun rjh/org-tags-expire-agenda-buffer ()
		"Removes all expiration tags from an AGENDA buffer."
	(interactive)
	(save-excursion
		(goto-char (point-min))
		(while (and (org-agenda-next-item 1)
								(next-single-property-change (point-at-eol) 'org-marker))
		  (rjh/org-tags-expire-agenda-headline rjh/org-tags-expiration-tags))))
#+END_SRC

Generic interactive agenda function.
 - Will expire selected headlines
 - Will expire whole agenda buffer with prefix.
#+BEGIN_SRC emacs-lisp
	(defun rjh/org-tags-expire-agenda (ARG)
		"Expires tags in org-agenda view."
		(interactive "p")
		(save-excursion
			(if (>= ARG 4)
					(rjh/org-tags-expire-agenda-buffer)
				(if (org-region-active-p)
						(call-interactively 'rjh/org-tags-expire-region)
					(rjh/org-tags-expire-agenda-headline rjh/org-tags-expiration-tags)))))
#+END_SRC

** Priorities
*** Keys
		Use "C-c ," to quickly set priorities.
		Only "," is required in agenda.

*** Default Priority Values
 Priorities are assigned A,B,C,D (E,F). B being the default.
 I'm particularly inspired by the Eisenhower Matrix and Must/Should/Nice todos.
 For reference, see the table below. Typically, one should attempt to accomplish
 as many B's in a day as possible; while also taking regular breaks.
 If you have nothing left todo, D's are pleasant enough.

 | PRIORITY   | NOT IMPORTANT | IMPORTANT  |
 |------------+---------------+------------|
 | NOT URGENT | D - PLEASANT  | B - SHOULD |
 |------------+---------------+------------|
 | URGENT     | C - NICE      | A - MUST   |
 |------------+---------------+------------|

 So.. one way to describe my priorities, would be...
 #+BEGIN_EXAMPLE
 #+PRIORITIES: C A F .
 #+END_EXAMPLE

 #+BEGIN_SRC emacs-lisp
	(setq org-default-priority ?F)
	(setq org-highest-priority ?A)
	(setq org-lowest-priority ?F)
 #+END_SRC


** Dependencies
Dependency settings.
This allows for task blocking/etc.
#+BEGIN_SRC emacs-lisp
 (setq org-enforce-todo-dependencies t)
 (setq org-agenda-dim-blocked-tasks t)
 (setq org-enforce-todo-checkbox-dependencies nil)
#+END_SRC

** Agenda
Store the list of agenda files in ...
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files "~/.emacs.d/agenda-files" )
#+END_SRC

Sorting strategy.
 - =habit-down= has been removed so that habits mix with regular tasks.
#+BEGIN_SRC emacs-lisp
	(setq org-agenda-sorting-strategy
				'((agenda time-up priority-down deadline-up scheduled-up effort-up tag-up category-keep)
					(todo   priority-down deadline-up scheduled-up effort-up tag-up category-keep)
					(tags   priority-down deadline-up scheduled-up effort-up tag-up category-keep)
					(search priority-down deadline-up scheduled-up effort-up tag-up category-keep)))
#+END_SRC

Custom agenda views
#+BEGIN_SRC emacs-lisp
	(setq org-agenda-custom-commands
	; General views
					'(("a" "Agenda for current Week or Day"
						 ((tags "+ACTION")
							(agenda ""
						 ((org-agenda-tag-filter-preset
							 '("-HABIT"))))))
						("n" "Agenda and all TODOs"
						 ((tags "+ACTION")
							(agenda "" ((org-agenda-span 1)))
							(alltodo "" )))
	; GTD tags
						("k" "Kanban for GTD TAGS"
						 ((tags "LEVEL=1+PROJECT")
							(tags "+NEW")
							(tags "+ACTION")
							(tags "-ACTION/|NEXT")
							(tags "+FLAGGED/|TODO|NEXT")
							(tags "+VERIFY/|TODO|NEXT")
							(tags "+DELEGATE/|TODO|NEXT")
							(tags "+WAITING/|TODO|NEXT")
							(tags "+BREAKDOWN/|TODO|NEXT")
							(tags "-PROJECT-ACTION-NEW-FLAGGED-VERIFY-DELEGATE-WAITING-BREAKDOWN/|TODO")
	))
						("h" "Habits"
						 ((tags "STYLE=\"habit\"|HABIT" )))
	; MASTER tags
						("r" "Kanban for MASTER tags"
						 (( tags "+MOTIVATION/|TODO|NEXT" )
							( tags "+ACQUIRE/|TODO|NEXT" )
							( tags "+SIGNIFICANCE/|TODO|NEXT" )
							( tags "+TRIGGER/|TODO|NEXT" )
							( tags "+EXHIBIT/|TODO|NEXT" )
							( tags "+REVIEW/|TODO|NEXT" )))
	; STUDY keywords
						("l" "Kanban for STUDY tags"
						 (( tags "+ACTION/|STUDY" )
							( tags "/|ALPHA" )
							( tags "/|BETA" )
							( tags "/|GAMMA" )
							( tags "/|DELTA" )
							( tags "/|THETA" )
							( tags "/|STUDY" )
							(tags "/|NU")))))
#+END_SRC

Take up current window when called.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-window-setup 'current-window)
#+END_SRC

** Stuck Projects
1. Match projects with the +PROJECT property, do not match completed items.
2. Non-stuck projects are identified with a NEXT TODO keyword.
3. Non-stuck projects are not identified with any tags.
4. Non-stuck projects are identified if the special word IGNORE is matched
   anywhere.
#+BEGIN_SRC emacs-lisp
	(setq org-stuck-projects
			'("+PROJECT+LEVEL=1/-DONE" ("NEXT") nil "\\<IGNORE\\>"))
#+END_SRC

** Clocking Working Time
  To save the clock history across Emacs sessions, use
#+BEGIN_SRC emacs-lisp
     (setq org-clock-persist 'history)
     (org-clock-persistence-insinuate)
#+END_SRC

Effort estimates and column view
Appointment default durations and effort addition.
Use C-c C-x C-c to access.
#+BEGIN_SRC emacs-lisp
	(setq org-global-properties '(("Effort_ALL". "0:10 0:20 0:30 0:45 1:00 3:00 4:00 8:00 9:00 2:00"))
				org-columns-default-format '"%38ITEM(Details) %7TODO(To Do) %TAGS(Context) %PRIORITY(Pri) %5Effort(Effort){:} %6CLOCKSUM(Clock)"
			 org-agenda-columns-add-appointments-to-effort-sum t
		 org-agenda-default-appointment-duration 30
	)
#+END_SRC

org-agenda-columns-add-appointments-to-effort-sum adds appointment times to
effort sums for the day.
** Archival
=C-cxs=
Add this to your file, to adjust =org-archive-location= for a particular file.
#+BEGIN_EXAMPLE
#+ARCHIVE: %s_done::
#+END_EXAMPLE

The default location is set below.
This archives items under the heading called =* Archive= in the same file.

#+BEGIN_SRC emacs-lisp
(setq org-archive-location "::* Archive" )
#+END_SRC

*Note*
 + =%s= represents the current filename.
 + =::= is a seperator between files and headers.
 + =file::= use this format for archiving to a specific file.
 + =::header= use this format to archive to a specific header.
 + =::***header= use asterisks to denote the sub-level of the header.
 + =::datetree/= use =datetree/= to file under a date-tree.

Do not mark archived tasks as done.
#+BEGIN_SRC emacs-lisp
(setq org-archive-mark-done nil)
#+END_SRC
** Capture/Refile Settings
See [[info:org#Capture%20templates][info:org#Capture templates]] for more information.

These are settings for capturing/refiling information.
#+BEGIN_SRC emacs-lisp
	;; (setq org-directory "~/.emacs.d/org")	;; Setup in "personal.org"
	(setq org-default-notes-file (expand-file-name "refile.org" org-directory))
	(setq rjh/org-diary (expand-file-name "diary.org" org-directory))
#+END_SRC

Capture templates.
  - todo :: Captures a basic todo entry.
	- journal :: Captures a dated journal entry.
	- event :: Captures a calendar event
	- habit :: Captures a habitual task.
	- learn :: Captures a learning task.
						Learning scheduling is spaced according to optimal spacing strategy.
						Progress is achieved through 5 study stages,
            Alpha-Beta-Gamma-Delta-Theta.

#+BEGIN_SRC emacs-lisp
	(setq org-capture-templates
				'(("t" "Todo" entry (file org-default-notes-file)
					 "* TODO %? :NEW:\n\t%i\n\t%a\n\n")
					 ("l" "Learn" entry (file org-default-notes-file)
					 "* TODO %^{prompt} :NEW:\n\t%i%?\n** TODO %\\1 :MOTIVATE: \nSCHEDULED: <%(org-read-date nil nil (concat \". \" (format-time-string \"%a %H:%M\")))>\n** TODO %\\1 :ACQUIRE: \nSCHEDULED: <%(org-read-date nil nil (concat \". \" (format-time-string \"%H:%M\" (time-add (current-time) 3600 ))))>\n** TODO %\\1 :SIGNIFY: \nSCHEDULED: <%(org-read-date nil nil \"+1d\")>\n** TODO %\\1 :TRIGGER: \nSCHEDULED: <%(org-read-date nil nil \"+15d\")>\n** TODO %\\1 :EXHIBIT: \nSCHEDULED: <%(org-read-date nil nil \"+30d\")>\n** TODO %\\1 :REVIEW: \nSCHEDULED: <%(org-read-date nil nil \"+58d\")>\n"
					 )
					("j" "Journal" entry (file+datetree rjh/org-diary )
					 "* %?\n\tEntered on %U\n\t%i\n\t%a\n\n" :kill-buffer )
					("e" "Event/Appointment" entry (file org-default-notes-file)
					 "* EVENT %?\n\tSCHEDULED: %^T\n\t%i\n\t%a\n\n")
					("h" "Habit" entry (file org-default-notes-file)
					 "* TODO %? :HABIT:\n\tSCHEDULED: %^T\n\t:PROPERTIES:\n\t:STYLE:\thabit\n\t:END:\n\t%i\n\t%a\n\n")
					;; Work on clocked items
					("x" "Checklist on clock" checkitem (clock) "+ [ ] %?\n\n" :kill-buffer)
					("T" "Table on clock" table-line (clock) :kill-buffer )))
#+END_SRC

Learning template schedule is as follows:
 /(assuming Monday is the first learning day)/
| Week No. | Mon   | Tue   | Wed   | Increment |
|----------+-------+-------+-------+-----------|
|        1 | STUDY |       |       |        +0 |
|        1 | ALPHA |       |       |       +1h |
|        1 |       | BETA  |       |       +1d |
|        3 |       | GAMMA |       |      +15d |
|        5 |       |       | DELTA |      +30d |
|        9 |       |       | THETA |      +58d |


Refiling list.
#+BEGIN_SRC emacs-lisp
	;; Function to return org-buffer-files
	(defun ixp/org-buffer-files ()
		"Return list of opened orgmode buffer files"
		;; org-refile functions must remove nil values
		(delete nil
						(mapcar (function buffer-file-name)
										(org-buffer-list 'files))))

	;; Refiling targets
	(setq org-refile-targets
				'((nil :maxlevel . 9 ) ;; This file
					(org-agenda-files :maxlevel . 9) ;; Any agenda file
					(ixp/org-buffer-files :maxlevel . 9))) ;; Any open org-buffer
	;; Refiling options
	(setq org-outline-path-complete-in-steps t)
	(setq org-refile-use-outline-path t)
	(setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

Specification is any of:
 +  "FILE"
 +  a cons cell (:tag . "TAG")
 +  a cons cell (:todo . "KEYWORD")
 +  a cons cell (:regexp . "REGEXP") ;; regexp to match headlines
 +  a cons cell (:level . N) Any headline of level N is considered a target.
 +  a cons cell (:maxlevel . N) Any headline with level <= N is a target.
 +  (nil . (:level . 1)) Match all top-level headlines in the current buffer.
 +  ("FILE" . (:level. 1)) Match all top-level headlines in FILE.

The union of these sets is presented (with completion) to the user by
org-refile. =C-cw= .
You can set the variable =org-refile-target-verify-function= to a function to
verify each headline found by the criteria above.

* Quick Templates
Org structure templates.
#+BEGIN_SRC emacs-lisp
	(add-to-list
	 'org-structure-template-alist
	 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC")
	 '("py" "#+BEGIN_SRC python\n?\n#+END_SRC")
	 )
#+END_SRC
* Display Settings
** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode t)))
#+END_SRC

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

Enable spell-checking in Org-mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

Re-display inline images if they are generated as a results portion of babel
code. You will need to set =#+STARTUP: inlineimages= in order to display in-line
images. The code below will update them when you evaluate a babel source code block.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-babel-after-execute-hook
          (lambda ()
            (when org-inline-image-overlays
              (org-redisplay-inline-images))))
#+END_SRC

Startup with all headlines showing. =content=
#+BEGIN_SRC emacs-lisp
(setq org-startup-folded 'content)
#+END_SRC

** Render checkbox in html
Checklists did not render as I would like them, I think this makes
them far more prettier in html.
#+BEGIN_SRC emacs-lisp
(setq org-html-checkbox-type 'html)
#+END_SRC
** Faces
FACES are custom settings for font, colour, background etc.
If you would like to modify a face that has already been loaded, you will have
to use the following function.
#+BEGIN_SRC emacs-lisp
	;; (face-spec-set 'study
	;; 							 '((t (:background "black"
	;; 										 :foreground "cyan"
	;; 										 :weight extra-bold)))
	;; 							 'face-defface-spec)
#+END_SRC


*** Keyword faces
These define faces for todo keywords.

	 #+BEGIN_SRC emacs-lisp
		 (defface todo
			 '((((class color) (min-colors 8))
					:background "red" :foreground "black" :weight extra-bold
					:inherit default :height 1.0 :box ( :style released-button )))
			 "Face for basic todo items."
			 :group 'todo-faces)
	 #+END_SRC
	 #+BEGIN_SRC emacs-lisp
		 (defface done
			 '((((class color) (min-colors 8))
					:background "green" :foreground "black" :weight extra-bold
					:inherit default :height 1.0 :box ( :style released-button )))
			 "Face for basic todo items."
			 :group 'todo-faces)
	 #+END_SRC
	 #+BEGIN_SRC emacs-lisp
		 (defface next
			 '((((class color) (min-colors 8))
					:background "blue" :foreground "white" :weight extra-bold
					:inherit default :height 1.0 :box ( :style released-button )))
			 "Face for basic todo items."
			 :group 'todo-faces)
	 #+END_SRC
	 #+BEGIN_SRC emacs-lisp
		 (defface event
			 '((((class color) (min-colors 8))
					:background "black" :foreground "green" :weight extra-bold
					:inherit default :height 1.0 :box ( :style released-button )))
			 "Face for basic todo items."
			 :group 'todo-faces)
	 #+END_SRC
	 #+BEGIN_SRC emacs-lisp
		 (defface study
			 '((((class color) (min-colors 8))
					:background "black" :foreground "cyan" :weight extra-bold
					:inherit default :height 1.0 :box ( :style released-button )))
			 "Face for study keyword."
			 :group 'todo-faces)
	 #+END_SRC

 Assignment.
 #+BEGIN_SRC emacs-lisp
				 (setq org-todo-keyword-faces
							 '(("TODO" . todo)
								 ("NEXT" . next)
								 ("DONE" . done)
								 ("EVENT" . event )
								 ("STUDY" . todo)
								 ("ALPHA" . study)
								 ("BETA" . study)
								 ("GAMMA" . study)
								 ("DELTA" . study)
								 ("THETA" . study)
							   ("CANCELED" . done)
	 ))
 #+END_SRC

*** Tag Faces
	 #+BEGIN_SRC emacs-lisp
		 (defface org-tag-red
			 '((((class color) (min-colors 8))
					:background "dark red" :foreground "cornsilk" :weight extra-bold
					:inherit org-tag :box ( :style released-button )))
			 "Face for tags."
			 :group 'tag-faces)
	 #+END_SRC
	 #+BEGIN_SRC emacs-lisp
		 (defface org-tag-orange
			 '((((class color) (min-colors 8))
					:background "tan4" :foreground "wheat" :weight extra-bold
					:inherit org-tag :box ( :style released-button )))
			 "Face for tags."
			 :group 'tag-faces)
	 #+END_SRC
	 #+BEGIN_SRC emacs-lisp
		 (defface org-tag-yellow
			 '((((class color) (min-colors 8))
					:background "dark olive green" :foreground "yellow" :weight extra-bold
					:inherit org-tag :box ( :style released-button )))
			 "Face for tags."
			 :group 'tag-faces)
	 #+END_SRC
	 #+BEGIN_SRC emacs-lisp
		 (defface org-tag-green
			 '((((class color) (min-colors 8))
					:background "dark green" :foreground "khaki" :weight extra-bold
					:inherit org-tag :box ( :style released-button )))
			 "Face for tags."
			 :group 'tag-faces)
	 #+END_SRC
	 #+BEGIN_SRC emacs-lisp
		 (defface org-tag-cyan
			 '((((class color) (min-colors 8))
					:background "dark cyan" :foreground "green yellow" :weight extra-bold
					:inherit org-tag :box ( :style released-button )))
			 "Face for tags."
			 :group 'tag-faces)
	 #+END_SRC
	 #+BEGIN_SRC emacs-lisp
		 (defface org-tag-blue
			 '((((class color) (min-colors 8))
					:background "navy" :foreground "turquoise" :weight extra-bold
					:inherit org-tag :box ( :style released-button )))
			 "Face for tags."
			 :group 'tag-faces)
	 #+END_SRC
	 #+BEGIN_SRC emacs-lisp
		 (defface org-tag-magenta
			 '((((class color) (min-colors 8))
					:background "dark magenta" :foreground "cyan" :weight extra-bold
					:inherit org-tag :box ( :style released-button )))
			 "Face for tags."
			 :group 'tag-faces)
	 #+END_SRC

Assignment
 #+BEGIN_SRC emacs-lisp
	 (setq org-tag-faces
				 '(("PROJECT" . org-tag-red)
					 ("ACTION" . org-tag-red)
					 ("FLAGGED" . org-tag-orange)
					 ("VERIFY" . org-tag-yellow)
					 ("DELEGATE" . org-tag-green)
					 ("WAITING" . org-tag-cyan)
					 ("BREAKDOWN" . org-tag-blue)
					 ("NEW" . org-tag-magenta)))
 #+END_SRC

* Contrib
Org-contrib consists of packages as part of org-plus-contrib.
** org-index
Keybindings. Index File.
Let's start off slow.
N.B. Make sure the index-id corresponds with your actual index header.
#+BEGIN_SRC emacs-lisp
	(require 'org-index)
	(setq org-index-file "~/.emacs.d/index.org"
			  org-index-id "1c3f8ddb-f941-42d9-88fb-8093095b9b5b"
				)
	(global-set-key (kbd "C-c i") 'org-index)
#+END_SRC
Then maybe later progress to this...
#+BEGIN_EXAMPLE emacs-lisp
(define-prefix-command 'org-index-map)
(global-set-key (kbd "C-c i") 'org-index-map)
(define-key org-index-map (kbd "o") (lambda () (interactive) (org-index 'occur)))
(define-key org-index-map (kbd "r") (lambda () (interactive) (org-index 'ref)))
(define-key org-index-map (kbd "l") (lambda () (interactive) (org-index 'leave)))
(define-key org-index-map (kbd "h") (lambda () (interactive) (org-index 'head)))
(define-key org-index-map (kbd "i") (lambda () (interactive) (org-index)))
#+END_EXAMPLE

** koma-letter-export
Activate KOMA-Script letter exporter.
#+BEGIN_SRC emacs-lisp
(eval-after-load 'ox '(require 'ox-koma-letter))
#+END_SRC

You can add your own customized class, my-letter as follows.
#+BEGIN_EXAMPLE
(eval-after-load 'ox-koma-letter
'(progn
(add-to-list 'org-latex-classes
'("my-letter"
"\\documentclass\{scrlttr2\}
\\usepackage[english]{babel}
\\setkomavar{frombank}{(1234)\\,567\\,890}
\[DEFAULT-PACKAGES]
\[PACKAGES]
\[EXTRA]"))

(setq org-koma-letter-default-class "my-letter")))
#+END_EXAMPLE
For more info see [[http://orgmode.org/worg/exporters/koma-letter-export.html][here.]]
* Harry Schwartz
This is some org configuration I have copied straight from Harry's book.
*** Exporting
Allow =babel= to evaluate
 - C / C++,
 - Emacs lisp,
 - Ruby,
 - dot, or
 - Gnuplot code.
 - R

#+BEGIN_SRC emacs-lisp
	(org-babel-do-load-languages
	 'org-babel-load-languages
	 '((C . t)  ;; This includes support for C++
		 (emacs-lisp . t)
		 (ruby . t)
		 (dot . t)
		 (gnuplot . t)
		 (plantuml . t)
		 (R . t)))
#+END_SRC

Don't ask before evaluating code blocks.

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

Associate the "dot" language with the =graphviz-dot= major mode.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
#+END_SRC

Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.

#+BEGIN_SRC emacs-lisp
  (setq org-export-with-smart-quotes t)
#+END_SRC

Set image sizes to their natural size.
#+BEGIN_SRC emacs-lisp
  (setq org-latex-image-default-width "")
#+END_SRC

Set org-mode images to whatever size you like.
E.g. Using =#+ATTR_ORG: :width 100=.
Be aware you will require imagemagick6 support for this.
(Imagemagick7 has made some changes which are currently incompatible [2018-05-17]).
#+BEGIN_SRC emacs-lisp
	(setq org-image-actual-width nil)
#+END_SRC
***** Exporting to HTML

Don't include a footer with my contact and publishing information at the bottom
of every exported HTML document.

#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC

* Bernt Hansen
A function for skipping archiving tasks from Bernt Hansen.
N.B. This hasn't actually been implemented anywhere yet.
#+BEGIN_SRC emacs-lisp
(defun bh/skip-non-archivable-tasks ()
  "Skip trees that are not available for archiving"
  (save-restriction
    (widen)
    ;; Consider only tasks with done todo headings as archivable candidates
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
          (subtree-end (save-excursion (org-end-of-subtree t))))
      (if (member (org-get-todo-state) org-todo-keywords-1)
          (if (member (org-get-todo-state) org-done-keywords)
              (let* ((daynr (string-to-int (format-time-string "%d" (current-time))))
                     (a-month-ago (* 60 60 24 (+ daynr 1)))
                     (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                     (this-month (format-time-string "%Y-%m-" (current-time)))
                     (subtree-is-current (save-excursion
                                           (forward-line 1)
                                           (and (< (point) subtree-end)
                                                (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                (if subtree-is-current
                    subtree-end ; Has a date in this month or last month, skip it
                  nil))  ; available to archive
            (or subtree-end (point-max)))
        next-headline))))
#+END_SRC
