#+TITLE: Number functions for emacs
#+AUTHOR: Roger J. H. Welsh
#+EMAIL: rjhwelsh@gmail.com
* Introduction
This configuration provides number manipulation functions for emacs.
Courtesy of [[https://www.emacswiki.org/emacs/IncrementNumber][emacswiki.org]].

* Integers
#+BEGIN_SRC emacs-lisp
(defun increment-number-at-point ()
      (interactive)
      (skip-chars-backward "0-9")
      (or (looking-at "[0-9]+")
          (error "No number at point"))
      (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))


#+END_SRC
* Decimal
Allows C-u prefix to set the increment.
Maintains field sizes.
Roll negative increments around 0000 -> 9999.
#+BEGIN_SRC emacs-lisp
(defun my-increment-number-decimal (&optional arg)
  "Increment the number forward from point by 'arg'."
  (interactive "p*")
  (save-excursion
    (save-match-data
      (let (inc-by field-width answer)
        (setq inc-by (if arg arg 1))
        (skip-chars-backward "0123456789")
        (when (re-search-forward "[0-9]+" nil t)
          (setq field-width (- (match-end 0) (match-beginning 0)))
          (setq answer (+ (string-to-number (match-string 0) 10) inc-by))
          (when (< answer 0)
            (setq answer (+ (expt 10 field-width) answer)))
          (replace-match (format (concat "%0" (int-to-string field-width) "d")
                                 answer)))))))
(defun my-decrement-number-decimal (&optional arg)
  (interactive "p*")
  (my-increment-number-decimal (if arg (- arg) -1)))
#+END_SRC

* Hexadecimal
#+BEGIN_SRC emacs-lisp
	(defun my-increment-number-hexadecimal (&optional arg)
		"Increment the number forward from point by 'arg'."
		(interactive "p*")
		(save-excursion
			(save-match-data
				(let (inc-by field-width answer hex-format)
					(setq inc-by (if arg arg 1))
					(skip-chars-backward "0123456789abcdefABCDEF")
					(when (re-search-forward "[0-9a-fA-F]+" nil t)
						(setq field-width (- (match-end 0) (match-beginning 0)))
						(setq answer (+ (string-to-number (match-string 0) 16) inc-by))
						(when (< answer 0)
							(setq answer (+ (expt 16 field-width) answer)))
						(if (equal (match-string 0) (upcase (match-string 0)))
								(setq hex-format "X")
							(setq hex-format "x"))
						(replace-match (format (concat "%0" (int-to-string field-width)
																					 hex-format)
																	 answer)))))))
	(defun my-decrement-number-hexadecimal (&optional arg)
		(interactive "p*")
		(my-increment-number-hexadecimal (if arg (- arg) -1)))
#+END_SRC
* Binary
#+BEGIN_SRC emacs-lisp
(defun my-format-bin (val width)
  "Convert a number to a binary string."
  (let (result)
    (while (> width 0)
      (if (equal (mod val 2) 1)
          (setq result (concat "1" result))
        (setq result (concat "0" result)))
      (setq val (/ val 2))
      (setq width (1- width)))
    result))

(defun my-increment-number-binary (&optional arg)
  "Increment the number forward from point by 'arg'."
  (interactive "p*")
  (save-excursion
    (save-match-data
      (let (inc-by field-width answer)
        (setq inc-by (if arg arg 1))
        (skip-chars-backward "01")
        (when (re-search-forward "[0-1]+" nil t)
          (setq field-width (- (match-end 0) (match-beginning 0)))
          (setq answer (+ (string-to-number (match-string 0) 2) inc-by))
          (when (< answer 0)
            (setq answer (+ (expt 2 field-width) answer)))
          (replace-match (my-format-bin answer field-width)))))))

#+END_SRC
