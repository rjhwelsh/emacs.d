#+TITLE: Irony-mode IDE for C, C++ and Objective-C
#+AUTHOR: Roger J. H. Welsh
#+EMAIL: rjhwelsh@gmail.com
* About
This configuration package provides packages for Emacs to perform as an IDE for
C-style languages.

This configuration is based off [[http://martinsosic.com/development/emacs/2017/12/09/emacs-cpp-ide.html][Martin Sosic's work]].

Some notes.
Irony is faster, and rtags is more feature-complete.
* Dependencies
See https://github.com/Sarcasm/irony-mode#installation for details.
** irony-server
	 Run =M-x irony-install-server= to build the irony-server.
	 Though this is already set in the configuration below.

* Setup
Setup is similar to rtags.org (RTag).
See [[./rtags.org::Setup][rtags.org]] or [[https://github.com/Sarcasm/irony-mode#compilation-database][Compilation Databases]] for more details.

A compilation database (compile_commands.json) is required.
See Sarcasm's notes on the [[https://sarcasm.github.io/notes/dev/compilation-database.html][Compilation Database]] for extensive documentation on
what this is, and why it is important.

** cmake
 #+BEGIN_EXAMPLE
 cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .
 #+END_EXAMPLE

* Irony
https://github.com/Sarcasm/irony-mode
irony-mode is an Emacs minor-mode that aims at improving the editing experience
for the C, C++ and Objective-C languages. It works by using a combination of an
Emacs package and a C++ program (irony-server) exposing libclang.

#+BEGIN_SRC emacs-lisp
	(use-package irony
		:ensure t
		:config
		(progn
			;; If irony server was never installed, install it.
			(unless (irony--find-server-executable) (call-interactively #'irony-install-server))

			(add-hook 'c++-mode-hook 'irony-mode)
			(add-hook 'c-mode-hook 'irony-mode)

			;; Use compilation database first, clang_complete as fallback.
			(setq-default irony-cdb-compilation-databases '(irony-cdb-libclang
																												irony-cdb-clang-complete))

			(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
		))
#+END_SRC

#+BEGIN_SRC emacs-lisp
		;; I use irony with company to get code completion.
		(use-package company-irony
			:requires company irony
			:ensure t
			:config
			(progn
				(eval-after-load 'company '(add-to-list 'company-backends 'company-irony))))
#+END_SRC

#+BEGIN_SRC emacs-lisp

		;; I use irony with flycheck to get real-time syntax checking.
		(use-package flycheck-irony
			:requires flycheck irony
			:ensure t
			:config
			(progn
				(eval-after-load 'flycheck '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))))
#+END_SRC

#+BEGIN_SRC emacs-lisp

		;; Eldoc shows argument list of the function you are currently writing in the echo area.
		(use-package irony-eldoc
			:requires eldoc irony
			:ensure t
			:config
			(progn
				(add-hook 'irony-mode-hook #'irony-eldoc)))

#+END_SRC


#+RESULTS:
: t
